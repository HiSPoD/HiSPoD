function HiSPoD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This program is developed for polychromatic x-ray diffraction of 
% crystalline samples. Major capabilities include:
% (1) Simulate diffraction pattern of a given material
% (2) Calculated radially averaged 1D diffraction profile from 2D
% diffraction data from APS 32-ID-B beamline.
% (3) Index (hkl) of diffraction data
% 
%
% Data to load:
% *.tif (series) files, *tiff file or converted *.mat files
% *.txt file for energy spectrum (first column energy, second colomn flux)
% *.txt file for absorption (first column energy, second colomn transmission)
%
%
% Basic parameters:
% (1) Sample-to-detector distance: from sample to detector plane
% (2) Detector angle: angle between detector plane surface normal and
% incident beam
% (3) Pixel size: assuming square pixel shape
% (4) Scaling factor: data binning factor, used for accelerating analyis 
% speed
% (5) Image dimension: pixel numbers of the detector
% (6) Number of  harmonic peaks: how many harmonic energies users would
% like to consider when labeling the (hkl) peaks
% (7) Direct beam X and Y (optional): direct beam position on detector, 
% could be negative number. If not known, users can use "Find (00)" tool
% to estimate them.
% (8) Content in "Sample structure" module: weight of diffraction intensity
% of each phase in the overall diffraction pattern. This is not the mass or
% mole content, instead, it's simply a parameter to for data fitting.
% Without input, the default is 50% for each.
% (9) Points in "Tools" module: Number of point for scattering vector q in
% I(q) (and I(tth)) plots.
% (10) Q res in "Tools" module: half width of q window when performing
% radially average. The larger the number, the smoother the intensity
% profile. It should be equal or slightly larger than the half of the
% difference of adjacent q points.
%
%
% Sample structure information:
% Users need to input sample crystal structure and reference
% diffraction information for using "Simulate diffraction" and "Label
% (hkl)" tools. 
%
% 
% $ Developed by Tao Sun in Jul 2013 $
% $ Last modified by Tao Sun in Jun 2015 $
% $ thf_map function was modified on Jul.14, 2015
% $ Imaging Group, Advanced Photon Source, Argonne National Laboratory $
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% User interface module
hFigXRD = findall(0,'Tag','xrd_fig');
if ~isempty(hFigXRD)
    figure(hFigXRD);
    return;
end
% Define main operation window
udata = {};
para = {};
str = {};
backgroundcolor = [.8 .8 .8];
panelcolor = backgroundcolor;
screenSize = get(0,'ScreenSize');
figureSize = [600 min(screenSize(4)-50,850)];
OS = computer;
if strfind(OS,'WIN')
    fontSize = 9;
elseif strfind(OS,'MAC');
    fontSize = 11;
end
figurePos  = [25 screenSize(4)-figureSize(2)-50 figureSize];
hFigXRD = figure(...
    'BackingStore','on',...
    'color',backgroundcolor,...
    'Units','pixels',...
    'Position',figurePos,...
    'DockControls','off',...
    'Resize','off',...
    'PaperOrient','portrait',...
    'PaperPositionMode','auto',...
    'HandleVisibility','callback',...
    'IntegerHandle','off',...
    'NumberTitle','off',...
    'MenuBar','none',...
    'Toolbar','none',...
    'Name','HiSPoD',...    
    'WindowStyle','normal',...
    'Tag','xrd_fig','UserData',[]);

hPanel1 = uipanel('Parent',hFigXRD,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Fontsize',fontSize,...   
    'Position',[0.005 0.725 0.99 0.27],...
    'Title','Experiment Parameters',...
    'TitlePosition','centertop');
%SizePanel1 = get(hPanel1,'position'); SizePanel1 = SizePanel1(3:4).*figureSize;

hPanel2 = uipanel('Parent',hFigXRD,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Fontsize',fontSize,...
    'Position',[0.005 0.43 0.99 0.29],...
    'Title','Sample Lattice Structure',...
    'TitlePosition','centertop');
%SizePanel2 = get(hPanel2,'position'); SizePanel2 = SizePanel2(3:4).*figureSize;

hPanel3 = uipanel('Parent',hFigXRD,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Fontsize',fontSize,...   
    'Position',[0.005 0.044 0.49 0.38],...
    'Title','Load Data Files',...
    'TitlePosition','centertop');
%SizePanel3 = get(hPanel3,'position'); SizePanel3 = SizePanel3(3:4).*figureSize;

hPanel4 = uipanel('Parent',hFigXRD,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Fontsize',fontSize,...   
    'Position',[0.505 0.044 0.490 0.38],...
    'Title','Analysis Tools',...
    'TitlePosition','centertop');
%SizePanel4 = get(hPanel4,'position'); SizePanel4 = SizePanel4(3:4).*figureSize;


% Input sample-to-detector distance
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Sample-to-detector (mm) ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.005 0.81 0.29 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.3 0.81 0.15 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditSDD',...
    'callback',@xrd_UpdateParaFcn);

% Input detector angle
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Detector angle (degree) ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.5,0.81 0.29 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.8 0.81 0.15 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditDA',...
    'callback',@xrd_UpdateParaFcn);

% Input Pixel size
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Pixel size (um) ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.005 0.62 0.29 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.3 0.62 0.15 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditPS',...
    'callback',@xrd_UpdateParaFcn);

% Input scaling factor
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Scaling factor (int) ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.5,0.62 0.29 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Popup',...
    'String','1|2|4',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.8 0.62 0.15 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditSF',...
    'callback',@xrd_UpdateParaFcn);    
    
% Input direct beam position X
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Direct beam X (pixel) ',...    
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.005 0.43 0.29 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.3 0.43 0.15 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditDBX',...
    'callback',@xrd_UpdateParaFcn);

% Input direct beam position Y
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Direct beam Y (pixel) ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.5,0.43 0.29 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.8 0.43 0.15 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditDBY',...
    'callback',@xrd_UpdateParaFcn);

% Input image pixel dimension
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Image dimension (V x H) ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.005 0.24 0.29 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.39 0.24 0.06 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditImgH',...
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','x',...
    'HorizontalAlignment','center',...
    'Fontsize',fontSize,...
    'Position',[0.37 0.24 0.01 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.3 0.24 0.06 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditImgV',...
    'callback',@xrd_UpdateParaFcn);

% Input number of harmonic peaks
uicontrol('Parent',hPanel1,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Number of harmonic ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.5,0.24 0.29 0.1]);
uicontrol('Parent',hPanel1,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.8 0.24 0.15 0.13],...
    'Fontsize',fontSize,...
    'Tag','EditNHP',...
    'callback',@xrd_UpdateParaFcn);

% Push button to load parameters
uicontrol('Parent',hPanel1,...
    'style','pushbutton',...
    'String','Load parameters',...
    'unit','norm',...
    'Position',[0.1 0.05 0.3 0.12],...
    'Fontsize',fontSize,...
    'Tag','xrd_Loadpara',...
    'TooltipString','Load parameter file',...
    'callback',@xrd_LoadParaFcn);

% Push button to export parameters
uicontrol('Parent',hPanel1,...
    'style','pushbutton',...
    'String','Export parameters',...
    'unit','norm',...
    'Position',[0.6 0.05 0.3 0.12],...
    'Fontsize',fontSize,...
    'Tag','xrd_ExportPara',...
    'TooltipString','Export parameter file',...
    'callback',@xrd_ExportParaFcn);



% Select lattice structure for Phase 1
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Phase 1,   content',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.01 0.85 0.17 0.1]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.185 0.86 0.05 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditP1perc',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','%',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.24 0.85 0.03 0.1]);
uicontrol('Parent',hPanel2,...
    'style','Popup',...
    'String','Cubic|Tetragonal|Orthorhombic|Hexagonal|Monoclinic|Rhombohedral|Triclinic',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','right',...    
    'Position',[0.01 0.75 0.26 0.1],...
    'Fontsize',fontSize,...
    'Tag','SelectCS1',...
    'callback',@xrd_UpdateParaFcn);

% Input lattice parameter
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','a (A) ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.01 0.58 0.05 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.06 0.58 0.06 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditLPa1',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','b (A) ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.01 0.41 0.05 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.06 0.41 0.06 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditLPb1',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','c (A) ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.01 0.24 0.05 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.06 0.24 0.06 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditLPc1',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','alpha ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.135 0.58 0.08 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.22 0.58 0.05 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditAlpha1',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','beta ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.135 0.41 0.08 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.22 0.41 0.05 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditBeta1',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','gamma ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.135 0.24 0.08 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.22 0.24 0.05 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditGamma1',...    
    'callback',@xrd_UpdateParaFcn);

% Push button to load sample structure
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Load',...
    'unit','norm',...
    'Position',[0.01 0.05 0.075 0.12],...
    'Fontsize',fontSize,...
    'Tag','xrd_LoadStr',...
    'TooltipString','Load structure file',...
    'callback',@xrd_LoadStrFcn1);
% Push button to export sample structure
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Export',...
    'unit','norm',...
    'Position',[0.09 0.05 0.075 0.12],...
    'Fontsize',fontSize,...
    'Tag','xrd_ExportStr',...
    'TooltipString','Export structure file',...
    'callback',@xrd_ExportStrFcn1);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Remove',...
    'unit','norm',...
    'Position',[0.17 0.05 0.1 0.12],...
    'Fontsize',fontSize,...
    'Tag','xrd_RemoveStrFcn1',...
    'TooltipString','Remove structure file',...
    'callback',@xrd_RemoveStrFcn1);

% Input interested (hkl)
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',' h        k        l       Int',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.30 0.85 0.2 0.1]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29 0.77 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith11',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34 0.77 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk11',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39 0.77 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl11',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44 0.77 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI11',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29 0.67 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith12',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34 0.67 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk12',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39 0.67 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl12',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44 0.67 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI12',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29 0.57 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith13',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34 0.57 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk13',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39 0.57 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl13',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44 0.57 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI13',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29 0.47 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith14',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34 0.47 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk14',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39 0.47 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl14',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44 0.47 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI14',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29 0.37 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith15',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34 0.37 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk15',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39 0.37 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl15',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44 0.37 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI15',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29 0.27 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith16',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34 0.27 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk16',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39 0.27 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl16',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44 0.27 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI16',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29 0.17 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith17',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34 0.17 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk17',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39 0.17 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl17',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44 0.17 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI17',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29 0.07 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith18',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34 0.07 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk18',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39 0.07 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl18',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44 0.07 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI18',...    
    'callback',@xrd_UpdateParaFcn);

% Select crystal structure for Phase 2
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Phase 2,   content',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.01+0.5 0.85 0.17 0.1]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.185+0.5 0.86 0.05 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditP2perc',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','%',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.24+0.5 0.85 0.03 0.1]);
uicontrol('Parent',hPanel2,...
    'style','Popup',...
    'String','Cubic|Tetragonal|Orthorhombic|Hexagonal|Monoclinic|Rhombohedral|Triclinic',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','right',...    
    'Position',[0.01+0.5 0.75 0.26 0.1],...
    'Fontsize',fontSize,...
    'Tag','SelectCS2',...
    'callback',@xrd_UpdateParaFcn);

% Input lattice parameter
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','a (A) ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.01+0.5 0.58 0.05 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.06+0.5 0.58 0.06 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditLPa2',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','b (A) ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.01+0.5 0.41 0.05 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.06+0.5 0.41 0.06 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditLPb2',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','c (A) ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.01+0.5 0.24 0.05 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.06+0.5 0.24 0.06 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditLPc2',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','alpha ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.135+0.5 0.58 0.08 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.22+0.5 0.58 0.05 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditAlpha2',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','beta ',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.135+0.5 0.41 0.08 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.22+0.5 0.41 0.05 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditBeta2',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','gamma ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.135+0.5 0.24 0.08 0.09]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.22+0.5 0.24 0.05 0.1],...
    'Fontsize',fontSize,...
    'Tag','EditGamma2',...    
    'callback',@xrd_UpdateParaFcn);

% Push button to load sample structure
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Load',...
    'unit','norm',...
    'Position',[0.01+0.5 0.05 0.075 0.12],...
    'Fontsize',fontSize,...
    'Tag','xrd_LoadStr',...
    'TooltipString','Load structure file',...
    'callback',@xrd_LoadStrFcn2);

% Push button to export sample structure
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Export',...
    'unit','norm',...
    'Position',[0.09+0.5 0.05 0.075 0.12],...
    'Fontsize',fontSize,...
    'Tag','xrd_ExportStr',...
    'TooltipString','Export structure file',...
    'callback',@xrd_ExportStrFcn2);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Remove',...
    'unit','norm',...
    'Position',[0.17+0.5 0.05 0.1 0.12],...
    'Fontsize',fontSize,...
    'Tag','xrd_RemoveStrFcn2',...
    'TooltipString','Remove structure file',...
    'callback',@xrd_RemoveStrFcn2);

% Input interested (hkl)
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',' h        k        l       Int',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.30+0.5 0.85 0.2 0.1]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29+0.5 0.77 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith21',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34+0.5 0.77 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk21',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39+0.5 0.77 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl21',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44+0.5 0.77 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI21',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29+0.5 0.67 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith22',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34+0.5 0.67 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk22',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39+0.5 0.67 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl22',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44+0.5 0.67 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI22',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29+0.5 0.57 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith23',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34+0.5 0.57 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk23',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39+0.5 0.57 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl23',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44+0.5 0.57 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI23',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29+0.5 0.47 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith24',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34+0.5 0.47 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk24',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39+0.5 0.47 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl24',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44+0.5 0.47 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI24',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29+0.5 0.37 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith25',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34+0.5 0.37 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk25',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39+0.5 0.37 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl25',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44+0.5 0.37 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI25',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29+0.5 0.27 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith26',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34+0.5 0.27 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk26',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39+0.5 0.27 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl26',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44+0.5 0.27 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI26',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29+0.5 0.17 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith27',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34+0.5 0.17 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk27',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39+0.5 0.17 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl27',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44+0.5 0.17 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI27',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.29+0.5 0.07 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Edith28',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.34+0.5 0.07 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editk28',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.39+0.5 0.07 0.04 0.08],...
    'Fontsize',fontSize,...
    'Tag','Editl28',...    
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','center',...
    'Enable','on',...    
    'Position',[0.44+0.5 0.07 0.05 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditI28',...    
    'callback',@xrd_UpdateParaFcn);


% Push button to load files
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Load single diffraction file',...
    'unit','norm',...
    'Position',[0.08 0.87 0.7 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_LoadData',...
    'TooltipString','Load diffraction data',...
    'callback',@xrd_LoadDataFcn);
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Flip',...
    'unit','norm',...
    'Position',[0.8 0.87 0.1 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_FlipData1',...
    'TooltipString','Flip pattern',...
    'callback',@xrd_FlipDataFcn1);
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Load diffraction data series',...
    'unit','norm',...
    'Position',[0.08 0.68 0.7 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_LoadSeries',...
    'TooltipString','Load diffraction series and compute average',...
    'callback',@xrd_LoadSerFcn);
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Flip',...
    'unit','norm',...
    'Position',[0.8 0.68 0.1 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_FlipData2',...
    'TooltipString','Flip series',...
    'callback',@xrd_FlipDataFcn2);
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Load background file',...
    'unit','norm',...
    'Position',[0.08 0.49 0.60 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_LoadBgr',...
    'TooltipString','Load background file',...
    'callback',@xrd_LoadBgrFcn);
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Apply',...
    'unit','norm',...
    'Position',[0.70 0.49 0.2 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_ApplyBgr',...
    'TooltipString','Apply background',...
    'callback',@xrd_ApplyBgrFcn);
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Load E spectrum',...
    'unit','norm',...
    'Position',[0.08 0.30 0.45 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_LoadSpec',...
    'TooltipString','Load energy spectrum file',...
    'callback',@xrd_LoadSpecFcn);
uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','E1 (keV): ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.55 0.31 0.2 0.1]);
uicontrol('Parent',hPanel3,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.75 0.35 0.15 0.07],...
    'Fontsize',fontSize,...
    'Tag','EditE1',...    
    'callback',@xrd_UpdateEFcn);
uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','Lamda1 (A): ',...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'Position',[0.55 0.245 0.24 0.1]);
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Load absorption file',...
    'unit','norm',...
    'Position',[0.08 0.11 0.60 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_LoadAbs',...
    'TooltipString','Load absorption file',...
    'callback',@xrd_LoadAbsFcn);
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Apply',...
    'unit','norm',...
    'Position',[0.70 0.11 0.2 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_ApplyAbs',...
    'TooltipString','Apply absorption',...
    'callback',@xrd_ApplyAbsFcn);



% Push button to estimate direct beam position
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Find direct beam',...
    'unit','norm',...
    'HorizontalAlignment','left',...
    'Position',[0.035 0.87 0.36 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_EstDB',...
    'TooltipString','Estimate direct beam position',...
    'callback',@xrd_EstDBFcn);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.405 0.88 0.07 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditEstDBnum',...
    'TooltipString','Number of rings to select',...
    'callback',@xrd_UpdateParaFcn);

% Push button to define ROI
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Define ROI',...
    'unit','norm',...
    'Position',[0.525 0.87 0.255 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_DefROI',...
    'TooltipString','Define region of interest',...
    'callback',@xrd_DefROIFcn);

% Push button to apply current mask
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Display',...
    'unit','norm',...
    'Position',[0.79 0.87 0.175 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_DispalyROI',...
    'TooltipString','Apply region of interest',...
    'callback',@xrd_DispalyROIFcn);

% Push button to calculate q map
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Calculate q map',...
    'unit','norm',...
    'Position',[0.035 0.74 0.44 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_CalQmap',...
    'TooltipString','Calculate q map',...
    'callback',@xrd_CalQmapFcn);

% Calculate diffraction pattern
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Simulate diffraction',...
    'unit','norm',...
    'Position',[0.525 0.74 0.44 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_SimulateDP',...
    'TooltipString','Simulate diffraction pattern',...
    'callback',@xrd_SimuDPFcn);

% Function to extract 1D intensity profile
%uicontrol('Parent',hPanel4,...
%    'style','text',...
%    'backgroundcolor',panelcolor,...
%    'String','Extract radially averaged 1D intensity',...
%    'HorizontalAlignment','left',...
%    'unit','norm',...
%    'Position',[0.035 0.62 0.9 0.1],...
%    'Fontsize',fontSize);

uicontrol('Parent',hPanel4,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','q points',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.06 0.6 0.17 0.1]);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.25 0.635 0.17 0.08],...
    'Fontsize',fontSize,...
    'TooltipString','Number of points in q axis (typical 100~400)',...
    'Tag','EditQnum',...
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel4,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','q res (A)',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.56 0.6 0.21 0.1]);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.805 0.635 0.17 0.08],...
    'Fontsize',fontSize,...
    'TooltipString','q width for doing radial averaging at each q point (typical 0.005~0.04)',...
    'Tag','EditQres',...
    'callback',@xrd_UpdateParaFcn);

uicontrol('Parent',hPanel4,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','phi points',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'Position',[0.03 0.495 0.2 0.1]);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.25 0.53 0.17 0.08],...
    'Fontsize',fontSize,...
    'TooltipString','Number of points in phi axis (typical 100~400)',...
    'Tag','EditPnum',...
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel4,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','phi res (deg)',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize,...
    'TooltipString','phi width for doing radial averaging at each phi point (typical 0.05~0.2)',...
    'Position',[0.525 0.495 0.25 0.1]);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.805 0.53 0.17 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditPres',...
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','I(tth) of data',...
    'unit','norm',...
    'Position',[0.035 0.41 0.44 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_CalIth',...
    'TooltipString','Get radially averaged I(tth) of data',...
    'callback',@xrd_CalIthFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','I(tth) of series',...
    'unit','norm',...
    'Position',[0.525 0.41 0.32 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_PushbuttonExportIth',...
    'TooltipString','Get radially averaged I(tth) of data series',...
    'callback',@xrd_CalIthSerFcn);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.855 0.42 0.12 0.08],...
    'Fontsize',fontSize,...
    'Tag','EditDelI',...
    'TooltipString','Intensity separated nearest intensity plots (typical 50~500)',...
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','I(tth) of simulation',...
    'unit','norm',...
    'Position',[0.035 0.28 0.44 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_CalIthSimu',...
    'TooltipString','Get radially averaged I(tth) of simulation',...
    'callback',@xrd_CalIthSimuFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','I(phi) of series',...
    'unit','norm',...
    'Position',[0.525 0.28 0.32 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_CalIq',...
    'TooltipString','Get radially averaged I(q) of data',...
    'callback',@xrd_CalIphiSerFcn);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.855 0.29 0.12 0.08],...
    'Fontsize',fontSize,...
    'TooltipString','Intensity separated nearest intensity plots (typical 50-500)',...
    'Tag','EditDelIphi',...
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Overlay I(tth)',...
    'unit','norm',...
    'Position',[0.035 0.15 0.44 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_OverlayIth',...
    'TooltipString','Overlay experiment and simulated I(tth)',...
    'callback',@xrd_OverlayIthFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Get I(q) of data',...
    'unit','norm',...
    'Position',[0.525 0.15 0.44 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_CalIq',...
    'TooltipString','Get radially averaged I(q) of data',...
    'callback',@xrd_CalIqFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Curve fit',...
    'unit','norm',...
    'Position',[0.035 0.02 0.22 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_Ith_fitting',...
    'TooltipString','Quantitative intensity curve fitting',...
    'callback',@xrd_IthFittingFcn);

uicontrol('Parent',hPanel4,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','eta',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize-1,...
    'Position',[0.26 0.07 0.1 0.05]);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.37 0.075 0.1 0.055],...
    'Fontsize',fontSize-1,...
    'TooltipString','Parameter in pseudo-Voigt function. 0-->Gaussian, 1-->Lorenzian',...
    'Tag','EditEta',...
    'callback',@xrd_UpdateParaFcn);
uicontrol('Parent',hPanel4,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String','sigma',...
    'HorizontalAlignment','right',...
    'Fontsize',fontSize-1,...
    'Position',[0.26 0.01 0.1 0.05]);
uicontrol('Parent',hPanel4,...
    'style','Edit',...
    'Units','norm',...
    'backgroundcolor','w',...    
    'HorizontalAlignment','left',...
    'Enable','on',...    
    'Position',[0.37 0.01 0.1 0.055],...
    'Fontsize',fontSize-1,...
    'TooltipString','Parameter in pseudo-Voigt function, indicating peak width (typical 0.001~0.1)',...
    'Tag','EditSigma',...
    'callback',@xrd_UpdateParaFcn);

uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','Label (hkl) in I(tth)',...
    'unit','norm',...
    'Position',[0.525 0.02 0.385 0.1],...
    'Fontsize',fontSize,...
    'Tag','xrd_LabelAllE',...
    'TooltipString','Label (hkl) for all E',...
    'callback',@xrd_LabelAllEFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','+',...
    'unit','norm',...
    'Position',[0.92 0.069 0.05 0.05],...
    'Fontsize',9,...
    'Tag','xrd_LabelPlus',...
    'TooltipString','Increase (hkl) bar height',...
    'callback',@xrd_LabelPlusFcn);
uicontrol('Parent',hPanel4,...
    'style','pushbutton',...
    'String','-',...
    'unit','norm',...
    'Position',[0.92 0.02 0.05 0.05],...
    'Fontsize',9,...
    'Tag','xrd_LabelMinus',...
    'TooltipString','Decrease (hkl) bar height',...
    'callback',@xrd_LabelMinusFcn);
%uicontrol('Parent',hPanel4,...
%    'style','pushbutton',...
%    'String','Save I(tth) plot',...
%    'unit','norm',...
%    'Position',[0.525 0.06 0.44 0.1],...
%    'Fontsize',fontSize,...
%    'Tag','xrd_PushbuttonSaveIth',...
%    'TooltipString','Save I(tth) plot',...
%    'callback',@xrd_SaveIthPlotFcn);

% Remove all data
uicontrol('Parent',hFigXRD,...
    'style','pushbutton',...
    'String','Remove data',...
    'unit','norm',...
    'Position',[0.005,0.005,0.19,0.031],...
    'Fontsize',fontSize,...
    'Tag','xrd_PushbuttonRemoveAll',...
    'TooltipString','Remove all loaded data',...
    'callback',@xrd_RemoveDataFcn);
% Close all figures
uicontrol('Parent',hFigXRD,...
    'style','pushbutton',...
    'String','Close all figures',...
    'unit','norm',...
    'Position',[0.605,0.005,0.19,0.031],...
    'Fontsize',fontSize,...
    'Tag','xrd_PushbuttonCloseAll',...
    'TooltipString','Close all figures',...
    'callback',@xrd_CloseFigFcn);
% Copy data to workspace
uicontrol('Parent',hFigXRD,...
    'style','pushbutton',...
    'String','Copy results',...
    'unit','norm',...
    'Position',[0.205,0.005,0.19,0.031],...
    'Fontsize',fontSize,...
    'Tag','xrd_PushbuttonCopytoWorkspace',...
    'TooltipString','Copy all results to workspace',...
    'callback',@xrd_CopyToWorkspaceFcn);
% Copy data to workspace
uicontrol('Parent',hFigXRD,...
    'style','pushbutton',...
    'String','Save results',...
    'unit','norm',...
    'Position',[0.405,0.005,0.19,0.031],...
    'Fontsize',fontSize,...
    'Tag','xrd_PushbuttonSaveData',...
    'TooltipString','Save all results',...
    'callback',@xrd_SaveAllDataFcn);
% Quit program
uicontrol('Parent',hFigXRD,...
    'style','pushbutton',...
    'String','Quit program',...
    'unit','norm',...
    'Position',[0.805,0.005,0.19,0.031],...
    'Fontsize',fontSize,...
    'Tag','xrd_PushbuttonQuit',...
    'TooltipString','Quit program',...
    'callback',@xrd_CloseProFcn);


%% Function modules

% Funciton for getting the basic parameters
function xrd_UpdateParaFcn(varargin)
    hFigXRD = gcbf;        
    udata.SDD = str2double(get(findall(hFigXRD,'tag','EditSDD'),'string'));
    udata.DA = str2double(get(findall(hFigXRD,'tag','EditDA'),'string'));
    udata.PS = str2double(get(findall(hFigXRD,'tag','EditPS'),'string'));    
    SF = get(findall(hFigXRD,'tag','EditSF'),'value');
    if SF == 1
        udata.SF = 1;
    elseif SF == 2
        udata.SF = 2;
    elseif SF == 3
        udata.SF = 4;
    end    
    udata.DBY = str2double(get(findall(hFigXRD,'tag','EditDBY'),'string'));
    udata.DBX = str2double(get(findall(hFigXRD,'tag','EditDBX'),'string'));
    imgV = str2double(get(findall(hFigXRD,'tag','EditImgV'),'string'));
    imgH = str2double(get(findall(hFigXRD,'tag','EditImgH'),'string'));
    udata.sz_img = [imgV imgH];
    udata.NHP = str2double(get(findall(hFigXRD,'tag','EditNHP'),'string'));
    udata.P1perc = str2double(get(findall(hFigXRD,'tag','EditP1perc'),'string'));
    udata.CS1 = get(findall(hFigXRD,'tag','SelectCS1'),'value');
    udata.LPa1 = str2double(get(findall(hFigXRD,'tag','EditLPa1'),'string'));
    udata.LPb1 = str2double(get(findall(hFigXRD,'tag','EditLPb1'),'string'));
    udata.LPc1 = str2double(get(findall(hFigXRD,'tag','EditLPc1'),'string'));
    udata.Alpha1 = str2double(get(findall(hFigXRD,'tag','EditAlpha1'),'string'));
    udata.Beta1 = str2double(get(findall(hFigXRD,'tag','EditBeta1'),'string'));
    udata.Gamma1 = str2double(get(findall(hFigXRD,'tag','EditGamma1'),'string'));
    udata.h1(1) = str2double(get(findall(hFigXRD,'tag','Edith11'),'string'));
    udata.h1(2) = str2double(get(findall(hFigXRD,'tag','Edith12'),'string'));
    udata.h1(3) = str2double(get(findall(hFigXRD,'tag','Edith13'),'string'));
    udata.h1(4) = str2double(get(findall(hFigXRD,'tag','Edith14'),'string'));
    udata.h1(5) = str2double(get(findall(hFigXRD,'tag','Edith15'),'string'));
    udata.h1(6) = str2double(get(findall(hFigXRD,'tag','Edith16'),'string'));
    udata.h1(7) = str2double(get(findall(hFigXRD,'tag','Edith17'),'string'));
    udata.h1(8) = str2double(get(findall(hFigXRD,'tag','Edith18'),'string'));
    udata.k1(1) = str2double(get(findall(hFigXRD,'tag','Editk11'),'string'));
    udata.k1(2) = str2double(get(findall(hFigXRD,'tag','Editk12'),'string'));
    udata.k1(3) = str2double(get(findall(hFigXRD,'tag','Editk13'),'string'));
    udata.k1(4) = str2double(get(findall(hFigXRD,'tag','Editk14'),'string'));
    udata.k1(5) = str2double(get(findall(hFigXRD,'tag','Editk15'),'string'));
    udata.k1(6) = str2double(get(findall(hFigXRD,'tag','Editk16'),'string'));
    udata.k1(7) = str2double(get(findall(hFigXRD,'tag','Editk17'),'string'));
    udata.k1(8) = str2double(get(findall(hFigXRD,'tag','Editk18'),'string'));
    udata.l1(1) = str2double(get(findall(hFigXRD,'tag','Editl11'),'string'));
    udata.l1(2) = str2double(get(findall(hFigXRD,'tag','Editl12'),'string'));
    udata.l1(3) = str2double(get(findall(hFigXRD,'tag','Editl13'),'string'));
    udata.l1(4) = str2double(get(findall(hFigXRD,'tag','Editl14'),'string'));
    udata.l1(5) = str2double(get(findall(hFigXRD,'tag','Editl15'),'string'));
    udata.l1(6) = str2double(get(findall(hFigXRD,'tag','Editl16'),'string'));
    udata.l1(7) = str2double(get(findall(hFigXRD,'tag','Editl17'),'string'));
    udata.l1(8) = str2double(get(findall(hFigXRD,'tag','Editl18'),'string'));
    udata.I1(1) = str2double(get(findall(hFigXRD,'tag','EditI11'),'string'));
    udata.I1(2) = str2double(get(findall(hFigXRD,'tag','EditI12'),'string'));
    udata.I1(3) = str2double(get(findall(hFigXRD,'tag','EditI13'),'string'));
    udata.I1(4) = str2double(get(findall(hFigXRD,'tag','EditI14'),'string'));
    udata.I1(5) = str2double(get(findall(hFigXRD,'tag','EditI15'),'string'));
    udata.I1(6) = str2double(get(findall(hFigXRD,'tag','EditI16'),'string'));
    udata.I1(7) = str2double(get(findall(hFigXRD,'tag','EditI17'),'string'));
    udata.I1(8) = str2double(get(findall(hFigXRD,'tag','EditI18'),'string'));
    udata.P2perc = str2double(get(findall(hFigXRD,'tag','EditP2perc'),'string'));
    udata.CS2 = get(findall(hFigXRD,'tag','SelectCS2'),'value');
    udata.LPa2 = str2double(get(findall(hFigXRD,'tag','EditLPa2'),'string'));
    udata.LPb2 = str2double(get(findall(hFigXRD,'tag','EditLPb2'),'string'));
    udata.LPc2 = str2double(get(findall(hFigXRD,'tag','EditLPc2'),'string'));
    udata.Alpha2 = str2double(get(findall(hFigXRD,'tag','EditAlpha2'),'string'));
    udata.Beta2 = str2double(get(findall(hFigXRD,'tag','EditBeta2'),'string'));
    udata.Gamma2 = str2double(get(findall(hFigXRD,'tag','EditGamma2'),'string'));
    udata.h2(1) = str2double(get(findall(hFigXRD,'tag','Edith21'),'string'));
    udata.h2(2) = str2double(get(findall(hFigXRD,'tag','Edith22'),'string'));
    udata.h2(3) = str2double(get(findall(hFigXRD,'tag','Edith23'),'string'));
    udata.h2(4) = str2double(get(findall(hFigXRD,'tag','Edith24'),'string'));
    udata.h2(5) = str2double(get(findall(hFigXRD,'tag','Edith25'),'string'));
    udata.h2(6) = str2double(get(findall(hFigXRD,'tag','Edith26'),'string'));
    udata.h2(7) = str2double(get(findall(hFigXRD,'tag','Edith27'),'string'));
    udata.h2(8) = str2double(get(findall(hFigXRD,'tag','Edith28'),'string'));
    udata.k2(1) = str2double(get(findall(hFigXRD,'tag','Editk21'),'string'));
    udata.k2(2) = str2double(get(findall(hFigXRD,'tag','Editk22'),'string'));
    udata.k2(3) = str2double(get(findall(hFigXRD,'tag','Editk23'),'string'));
    udata.k2(4) = str2double(get(findall(hFigXRD,'tag','Editk24'),'string'));
    udata.k2(5) = str2double(get(findall(hFigXRD,'tag','Editk25'),'string'));
    udata.k2(6) = str2double(get(findall(hFigXRD,'tag','Editk26'),'string'));
    udata.k2(7) = str2double(get(findall(hFigXRD,'tag','Editk27'),'string'));
    udata.k2(8) = str2double(get(findall(hFigXRD,'tag','Editk28'),'string'));
    udata.l2(1) = str2double(get(findall(hFigXRD,'tag','Editl21'),'string'));
    udata.l2(2) = str2double(get(findall(hFigXRD,'tag','Editl22'),'string'));
    udata.l2(3) = str2double(get(findall(hFigXRD,'tag','Editl23'),'string'));
    udata.l2(4) = str2double(get(findall(hFigXRD,'tag','Editl24'),'string'));
    udata.l2(5) = str2double(get(findall(hFigXRD,'tag','Editl25'),'string'));
    udata.l2(6) = str2double(get(findall(hFigXRD,'tag','Editl26'),'string'));
    udata.l2(7) = str2double(get(findall(hFigXRD,'tag','Editl27'),'string'));
    udata.l2(8) = str2double(get(findall(hFigXRD,'tag','Editl28'),'string'));
    udata.I2(1) = str2double(get(findall(hFigXRD,'tag','EditI21'),'string'));
    udata.I2(2) = str2double(get(findall(hFigXRD,'tag','EditI22'),'string'));
    udata.I2(3) = str2double(get(findall(hFigXRD,'tag','EditI23'),'string'));
    udata.I2(4) = str2double(get(findall(hFigXRD,'tag','EditI24'),'string'));
    udata.I2(5) = str2double(get(findall(hFigXRD,'tag','EditI25'),'string'));
    udata.I2(6) = str2double(get(findall(hFigXRD,'tag','EditI26'),'string'));
    udata.I2(7) = str2double(get(findall(hFigXRD,'tag','EditI27'),'string'));
    udata.I2(8) = str2double(get(findall(hFigXRD,'tag','EditI28'),'string'));
    udata.DBn = str2double(get(findall(hFigXRD,'tag','EditEstDBnum'),'string'));
    udata.Qnum = str2double(get(findall(hFigXRD,'tag','EditQnum'),'string'));
    udata.Qres = str2double(get(findall(hFigXRD,'tag','EditQres'),'string'));  
    udata.Pnum = str2double(get(findall(hFigXRD,'tag','EditPnum'),'string'));
    udata.Pres = str2double(get(findall(hFigXRD,'tag','EditPres'),'string'));  
    udata.DelIth = str2double(get(findall(hFigXRD,'tag','EditDelI'),'string'));      
    udata.DelIphi = str2double(get(findall(hFigXRD,'tag','EditDelIphi'),'string'));      
    udata.eta = str2double(get(findall(hFigXRD,'tag','EditEta'),'string'));      
    udata.sigma = str2double(get(findall(hFigXRD,'tag','EditSigma'),'string'));      
    set(hFigXRD,'UserData',udata);
end

function xrd_UpdateEFcn(varargin)
    hFigXRD = gcbf;        
    udata.E1 = str2double(get(findall(hFigXRD,'tag','EditE1'),'string'));
    if isfield(udata,'E1') 
        for ii = 1:6; udata.E(ii) = udata.E1*ii; end
        set(findall(hFigXRD,'tag','Energy spec'),'string',' ');
        if isfield(udata,'E0')
            udata = rmfield(udata,'E0'); udata = rmfield(udata,'I0');
        end
    end
    udata.lamda = 4.136e-15*2.99792458e8./udata.E*1e7;
    uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',num2str(udata.lamda(1),3),...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'tag','Wavelength',...
    'Position',[0.785 0.26 0.25 0.08]);       
    set(hFigXRD,'UserData',udata);
end

function xrd_SetParaFcn(varargin)
    set(findall(hFigXRD,'tag','EditSDD'),'string',para.SDD);
    set(findall(hFigXRD,'tag','EditDA'),'string',para.DA);    
    set(findall(hFigXRD,'tag','EditPS'),'string',para.PS);    
    set(findall(hFigXRD,'tag','EditDBY'),'string',para.DBY);
    set(findall(hFigXRD,'tag','EditDBX'),'string',para.DBX);
    set(findall(hFigXRD,'tag','EditImgV'),'string',para.sz_img(1));
    set(findall(hFigXRD,'tag','EditImgH'),'string',para.sz_img(2));
    set(findall(hFigXRD,'tag','EditNHP'),'string',para.NHP);    
    set(findall(hFigXRD,'tag','EditEstDBnum'),'string',para.DBn);
    set(findall(hFigXRD,'tag','EditQnum'),'string',para.Qnum);
    set(findall(hFigXRD,'tag','EditQres'),'string',para.Qres);  
    if para.SF == 1
        SF = 1;
    elseif para.SF == 2
        SF = 2;
    elseif para.SF == 4
        SF = 3;
    end
    set(findall(hFigXRD,'tag','EditSF'),'value',SF);
    udata.mask = para.mask;
    set(hFigXRD,'UserData',udata);
end

function xrd_SetStrFcn1(varargin) 
    set(findall(hFigXRD,'tag','SelectCS1'),'value',str.CS);
    set(findall(hFigXRD,'tag','EditLPa1'),'string',str.LPa);
    set(findall(hFigXRD,'tag','EditLPb1'),'string',str.LPb);
    set(findall(hFigXRD,'tag','EditLPc1'),'string',str.LPc);
    set(findall(hFigXRD,'tag','EditAlpha1'),'string',str.Alpha);
    set(findall(hFigXRD,'tag','EditBeta1'),'string',str.Beta);
    set(findall(hFigXRD,'tag','EditGamma1'),'string',str.Gamma);
    set(findall(hFigXRD,'tag','Edith11'),'string',str.h(1));
    set(findall(hFigXRD,'tag','Edith12'),'string',str.h(2));
    set(findall(hFigXRD,'tag','Edith13'),'string',str.h(3));
    set(findall(hFigXRD,'tag','Edith14'),'string',str.h(4));
    set(findall(hFigXRD,'tag','Edith15'),'string',str.h(5));
    set(findall(hFigXRD,'tag','Edith16'),'string',str.h(6));    
    set(findall(hFigXRD,'tag','Edith17'),'string',str.h(7));    
    set(findall(hFigXRD,'tag','Edith18'),'string',str.h(8));    
    set(findall(hFigXRD,'tag','Editk11'),'string',str.k(1));
    set(findall(hFigXRD,'tag','Editk12'),'string',str.k(2));
    set(findall(hFigXRD,'tag','Editk13'),'string',str.k(3));
    set(findall(hFigXRD,'tag','Editk14'),'string',str.k(4));
    set(findall(hFigXRD,'tag','Editk15'),'string',str.k(5));
    set(findall(hFigXRD,'tag','Editk16'),'string',str.k(6));
    set(findall(hFigXRD,'tag','Editk17'),'string',str.k(7));
    set(findall(hFigXRD,'tag','Editk18'),'string',str.k(8));
    set(findall(hFigXRD,'tag','Editl11'),'string',str.l(1));
    set(findall(hFigXRD,'tag','Editl12'),'string',str.l(2));
    set(findall(hFigXRD,'tag','Editl13'),'string',str.l(3));
    set(findall(hFigXRD,'tag','Editl14'),'string',str.l(4));
    set(findall(hFigXRD,'tag','Editl15'),'string',str.l(5));
    set(findall(hFigXRD,'tag','Editl16'),'string',str.l(6));
    set(findall(hFigXRD,'tag','Editl17'),'string',str.l(7));
    set(findall(hFigXRD,'tag','Editl18'),'string',str.l(8));
    set(findall(hFigXRD,'tag','EditI11'),'string',str.I(1));
    set(findall(hFigXRD,'tag','EditI12'),'string',str.I(2));
    set(findall(hFigXRD,'tag','EditI13'),'string',str.I(3));
    set(findall(hFigXRD,'tag','EditI14'),'string',str.I(4));
    set(findall(hFigXRD,'tag','EditI15'),'string',str.I(5));
    set(findall(hFigXRD,'tag','EditI16'),'string',str.I(6));
    set(findall(hFigXRD,'tag','EditI17'),'string',str.I(7));     
    set(findall(hFigXRD,'tag','EditI18'),'string',str.I(8));     
end

function xrd_SetStrFcn2(varargin) 
    set(findall(hFigXRD,'tag','SelectCS2'),'value',str.CS);
    set(findall(hFigXRD,'tag','EditLPa2'),'string',str.LPa);
    set(findall(hFigXRD,'tag','EditLPb2'),'string',str.LPb);
    set(findall(hFigXRD,'tag','EditLPc2'),'string',str.LPc);
    set(findall(hFigXRD,'tag','EditAlpha2'),'string',str.Alpha);
    set(findall(hFigXRD,'tag','EditBeta2'),'string',str.Beta);
    set(findall(hFigXRD,'tag','EditGamma2'),'string',str.Gamma);
    set(findall(hFigXRD,'tag','Edith21'),'string',str.h(1));
    set(findall(hFigXRD,'tag','Edith22'),'string',str.h(2));
    set(findall(hFigXRD,'tag','Edith23'),'string',str.h(3));
    set(findall(hFigXRD,'tag','Edith24'),'string',str.h(4));
    set(findall(hFigXRD,'tag','Edith25'),'string',str.h(5));
    set(findall(hFigXRD,'tag','Edith26'),'string',str.h(6));    
    set(findall(hFigXRD,'tag','Edith27'),'string',str.h(7));    
    set(findall(hFigXRD,'tag','Edith28'),'string',str.h(8));    
    set(findall(hFigXRD,'tag','Editk21'),'string',str.k(1));
    set(findall(hFigXRD,'tag','Editk22'),'string',str.k(2));
    set(findall(hFigXRD,'tag','Editk23'),'string',str.k(3));
    set(findall(hFigXRD,'tag','Editk24'),'string',str.k(4));
    set(findall(hFigXRD,'tag','Editk25'),'string',str.k(5));
    set(findall(hFigXRD,'tag','Editk26'),'string',str.k(6));
    set(findall(hFigXRD,'tag','Editk27'),'string',str.k(7));
    set(findall(hFigXRD,'tag','Editk28'),'string',str.k(8));
    set(findall(hFigXRD,'tag','Editl21'),'string',str.l(1));
    set(findall(hFigXRD,'tag','Editl22'),'string',str.l(2));
    set(findall(hFigXRD,'tag','Editl23'),'string',str.l(3));
    set(findall(hFigXRD,'tag','Editl24'),'string',str.l(4));
    set(findall(hFigXRD,'tag','Editl25'),'string',str.l(5));
    set(findall(hFigXRD,'tag','Editl26'),'string',str.l(6));
    set(findall(hFigXRD,'tag','Editl27'),'string',str.l(7));
    set(findall(hFigXRD,'tag','Editl28'),'string',str.l(8));
    set(findall(hFigXRD,'tag','EditI21'),'string',str.I(1));
    set(findall(hFigXRD,'tag','EditI22'),'string',str.I(2));
    set(findall(hFigXRD,'tag','EditI23'),'string',str.I(3));
    set(findall(hFigXRD,'tag','EditI24'),'string',str.I(4));
    set(findall(hFigXRD,'tag','EditI25'),'string',str.I(5));
    set(findall(hFigXRD,'tag','EditI26'),'string',str.I(6));
    set(findall(hFigXRD,'tag','EditI27'),'string',str.I(7));     
    set(findall(hFigXRD,'tag','EditI28'),'string',str.I(8));     
end

% Function to load paramters
function xrd_LoadParaFcn(varargin)
    hFigXRD = gcbf;
    [filename, pathname] = uigetfile('*.mat','Matlab data (*.mat)', 'Select a parameter file');
    if isequal(filename,0), return; end
    cd(pathname);
    xrd_para = load(filename);
    if ~isfield(xrd_para,'para')
        errordlg('This is not a parameter file!','Error');
        return;
    end
    para = xrd_para.para;
    set(hFigXRD,'UserData',para);
    xrd_SetParaFcn;
    xrd_UpdateParaFcn;
    xrd_UpdateEFcn;
end

% Function to export parameters
function xrd_ExportParaFcn(varargin)
    hFigXRD = gcbf;
    para = get(hFigXRD,'UserData');
    if isfield(para,'img');para = rmfield(para,{'img'});end
    if isfield(para,'q_map');para = rmfield(para,{'q_map',...
            'currentSDD','currentDA','currentPS','currentSF','currentDBX'...
            'currentDBY'});
    end
    if isfield(para,'currentE');para = rmfield(para,{'currentE'});end
    if isfield(para,'currentIth');para = rmfield(para,{'currentIth'});end
    %if isfield(para,'mask');para = rmfield(para,{'mask'});end
    if isfield(para,'A');para = rmfield(para,{'A'});end
    if isfield(para,'E');para = rmfield(para,{'E','E1','lamda'});end
    if isfield(para,'Ith');para = rmfield(para,{'th','Ith'});end
    if isfield(para,'Iq');para = rmfield(para,{'q','Iq'});end   
    if isfield(para,'CS');para = rmfield(para,{'LPa','LPb','LPc','Alpha',...
            'Beta','Gamma','h','k','l','I'});end
    [filename,filepath] = uiputfile('*.mat','Export Parameters As','*.mat');
    if isequal(filename,0), return; end
    save(fullfile(filepath,filename),'para');
end

% Function to load paramters
function xrd_LoadStrFcn1(varargin)
    hFigXRD = gcbf;
    [filename, pathname] = uigetfile('*.mat','Matlab data (*.mat)', 'Select a parameter file');
    if isequal(filename,0), return; end
    cd(pathname);
    xrd_str = load(filename);
    if ~isfield(xrd_str,'str')
        errordlg('This is not a structure file!','Error');
        return;
    end
    try
        str = xrd_str.str;
        set(hFigXRD,'UserData',str);
        xrd_SetStrFcn1;
        xrd_UpdateParaFcn;
    catch err        
        xrd_str.str.h(8) = NaN;
        xrd_str.str.k(8) = NaN;
        xrd_str.str.l(8) = NaN;
        xrd_str.str.I(8) = NaN;
        str = xrd_str.str;
        try           
            str = xrd_str.str;
            set(hFigXRD,'UserData',str);
            xrd_SetStrFcn1;
            xrd_UpdateParaFcn;
        catch err2
            errordlg('The format of this structure file in invalid!','Error');
            return;
        end
    end

end
function xrd_LoadStrFcn2(varargin)
    hFigXRD = gcbf;
    [filename, pathname] = uigetfile('*.mat','Matlab data (*.mat)', 'Select a parameter file');
    if isequal(filename,0), return; end
    cd(pathname);
    xrd_str = load(filename);
    if ~isfield(xrd_str,'str')
        errordlg('This is not a structure file!','Error');
        return;
    end
    try
        str = xrd_str.str;
        set(hFigXRD,'UserData',str);
        xrd_SetStrFcn2;
        xrd_UpdateParaFcn;
    catch err        
        xrd_str.str.h(8) = NaN;
        xrd_str.str.k(8) = NaN;
        xrd_str.str.l(8) = NaN;
        xrd_str.str.I(8) = NaN;
        str = xrd_str.str;
        try           
            str = xrd_str.str;
            set(hFigXRD,'UserData',str);
            xrd_SetStrFcn1;
            xrd_UpdateParaFcn;
        catch err2
            errordlg('The format of this structure file in invalid!','Error');
            return;
        end
    end
end

% Function to export parameters
function xrd_ExportStrFcn1(varargin)
    hFigXRD = gcbf;
    str.CS = udata.CS1;
    str.LPa = udata.LPa1;
    str.LPb = udata.LPb1;
    str.LPc = udata.LPc1;
    str.Alpha = udata.Alpha1;
    str.Beta = udata.Beta1;
    str.Gamma = udata.Gamma1;
    str.h = udata.h1;
    str.k = udata.k1;
    str.l = udata.l1;
    str.I = udata.I1;
    [filename,filepath] = uiputfile('*.mat','Export Structure As','*.mat');
    if isequal(filename,0), return; end
    save(fullfile(filepath,filename),'str');
end
function xrd_ExportStrFcn2(varargin)
    hFigXRD = gcbf;    
    str.CS = udata.CS2;
    str.LPa = udata.LPa2;
    str.LPb = udata.LPb2;
    str.LPc = udata.LPc2;
    str.Alpha = udata.Alpha2;
    str.Beta = udata.Beta2;
    str.Gamma = udata.Gamma2;
    str.h = udata.h2;
    str.k = udata.k2;
    str.l = udata.l2;
    str.I = udata.I2;
    [filename,filepath] = uiputfile('*.mat','Export Structure As','*.mat');
    if isequal(filename,0), return; end
    save(fullfile(filepath,filename),'str');
end    

% Function for loading a single diffraction pattern
function xrd_LoadDataFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if strfind(OS,'MAC')
        img_format = '*.TIF';
    elseif strfind(OS,'WIN');
        img_format = '*.tif';
    end
    if isfield(udata, 'imgSeries'); udata = rmfield(udata,{'imgSeries'});end
    [filename, pathname] = uigetfile({img_format,['Raw data ' img_format];...
        '*.tiff','Image data (*.tiff)';'*.mat','Matlab data (*.mat)'},...
        'Select a matlab or tif data file');
    if isequal(filename,0), return; end
    cd(pathname);
    ftype = strfind(filename,'.mat');
    if ~isempty(ftype)
        tmp = load(filename);
        vars = whos('-file', filename);
        img = tmp.(vars.name);
    elseif isempty(ftype)   
        info = imfinfo(filename);
        N_img = numel(info);
        Im = zeros(1,N_img);
        if N_img >1
            for ii = 1:N_img
                img_temp = double(imread(filename,ii));
                Im(ii) = mean(img_temp(:));
            end
            figure; plot(1:N_img,Im,'bo'); xlabel('Frame'); ylabel('Mean diffraction intensity');
            %[a b] = max(Im);
            prompt = {'No: '};
            dlg_title = 'Which data to load';
            LoadData = inputdlg(prompt,dlg_title, [1,length(dlg_title)]);
            b = str2double(LoadData{1});
            img = double(imread(filename,b));
        else
            img = double(imread(filename));
            b = 1;
        end
    end
    udata.img = img; 
    udata.imgSeries{1} = img;
    udata.sz_img = size(img);    
    udata.fname = filename;
    hFig = findall(0,'tag','xrd_img');
    close(hFig);
    figure('tag','xrd_img'); imagesc(udata.img); 
    colorbar; caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);
    axis image; 
    xlabel('Pixel'); ylabel('Pixel');        
    uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',filename,...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize-2,...
    'tag','Single file',...
    'Position',[0.1 0.78 0.78 0.08]);   
    set(findall(hFigXRD,'tag','Package file'),'string',' ');    
    set(findall(hFigXRD,'tag','EditImgV'),'string',udata.sz_img(1));
    set(findall(hFigXRD,'tag','EditImgH'),'string',udata.sz_img(2));
    set(hFigXRD,'UserData',udata);
end

% Funciton for loading a series of diffraction patterns and do average
function xrd_LoadSerFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if strfind(OS,'MAC')
        img_format = '*.TIF';
    elseif strfind(OS,'WIN');
        img_format = '*.tif';
    end
    if isfield(udata,'imgSeries'); udata = rmfield(udata,'imgSeries'); end
    [filename, pathname] = uigetfile({img_format,['Raw data ' img_format];...
        '*.tiff','Image data (*.tiff)';},...
        'Select a matlab or tif data package file','MultiSelect', 'on');
    if isequal(filename,0), return; end
    cd(pathname);
    
    if iscell(filename) == 0
        info = imfinfo(filename);
        N_img = numel(info);
        img1 = double(imread(filename,1));
        udata.img = img1;        
        for jj = 1:N_img
            udata.imgSeries{jj} = double(imread(filename,jj));                    
            imgStack(:,:,jj) = double(imread(filename,jj));                    
        end
        filename_str = filename;
    elseif iscell(filename) == 1
        img1 = double(imread(filename{2},1));
        udata.img = img1;        
        for ii = 1:numel(filename)            
            udata.imgSeries{ii} = double(imread(filename{ii},1));                   
            imgStack(:,:,ii) = double(imread(filename{ii},1));                   
        end        
        filename_str = [filename{1} '(' num2str(numel(filename)) ')'];
    end    
    udata.fname = filename;
    udata.sz_img = size(img1);    
    hFig = findall(0,'tag','xrd_img');
    close(hFig);    
    figure('tag','xrd_img'); imagesc(udata.img); 
    colorbar; caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);
    axis image; xlabel('Pixel'); ylabel('Pixel');            
    %implay(imgStack); axis image;
    uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',filename_str,...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize-2,...
    'tag','Package file',...
    'Position',[0.1 0.59 0.78 0.08]);     
    set(findall(hFigXRD,'tag','Single file'),'string',' ');
    set(findall(hFigXRD,'tag','EditImgV'),'string',udata.sz_img(1));
    set(findall(hFigXRD,'tag','EditImgH'),'string',udata.sz_img(2));
    set(hFigXRD,'UserData',udata);
    xrd_UpdateParaFcn;
end

% Function for flipping the single data left-right
function xrd_FlipDataFcn1(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    img = fliplr(udata.img);    
    udata.img = img;
    hFig = findall(0,'tag','xrd_img');
    close(hFig);
    figure('tag','xrd_img'); imagesc(udata.img); 
    colorbar; axis image;
    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);    
    xlabel('Pixel'); ylabel('Pixel');     
    set(hFigXRD,'UserData',udata);
end

% Function for flipping the data series left-right
function xrd_FlipDataFcn2(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    img = fliplr(udata.img);    
    udata.img = img;
    for ii = 1:length(udata.imgSeries)
        udata.imgSeries{ii} = fliplr(udata.imgSeries{ii});
        imgStack(:,:,ii) = udata.imgSeries{ii};  
    end
    hFig = findall(0,'tag','xrd_img');
    close(hFig);
    figure('tag','xrd_img'); imagesc(udata.img); 
    colorbar; axis image; xlabel('Pixel'); ylabel('Pixel');
    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);        
    implay(imgStack); axis image;
    set(hFigXRD,'UserData',udata);
end

% Function for loading background file
function xrd_LoadBgrFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');        
    if strfind(OS,'MAC')
        img_format = '*.TIF';
    elseif strfind(OS,'WIN');
        img_format = '*.tif';
    end
    [filename, pathname] = uigetfile({img_format,['Raw data ' img_format];...
        '*.tiff','Image data (*.tiff)';'*.mat','Matlab data (*.mat)'},...
        'Select a matlab or tif data file');
    if isequal(filename,0), return; end
    cd(pathname);
    ftype = strfind(filename,'.mat');
    if ~isempty(ftype)
        tmp = load(filename);
        vars = whos('-file', filename);
        bgr = tmp.(vars.name);
    elseif isempty(ftype)   
        info = imfinfo(filename);
        N_bgr = numel(info);
        if N_bgr >1
            bgr = double(imread(filename,2));
        else
            bgr = double(imread(filename));
        end       
    end
    udata.bgr = bgr;    
    figure('tag','xrd_bgr'); imagesc(udata.bgr); colorbar
    caxis([0 mean(bgr(:))*5]);
    axis image; title('Background image');
    xlabel('Pixel'); ylabel('Pixel');             
    uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',filename,...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize-2,...
    'tag','Background file',...
    'Position',[0.1 0.41 0.78 0.08]); 
    set(hFigXRD,'UserData',udata);
end

% Function to apply current background
function xrd_ApplyBgrFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');  
    if ~isfield(udata,'img')
        errordlg('You need to load diffraction data first!','Error');        
        return;
    elseif ~isfield(udata,'bgr')
        errordlg('You do not have a background file to apply!','Error');        
        return;
    end
    I_temp = udata.img-udata.bgr;
    figure('tag','xrd_img_nobgr'); imagesc(I_temp); 
    colorbar; caxis([mean(I_temp(:))-2*std(I_temp(:)) mean(I_temp(:))+4*std(I_temp(:))]);    
    axis image; title('Diffraction pattern after background subtraction');    
    xlabel('Pixel'); ylabel('Pixel');       
    choice = questdlg('Do you want to use this background?',...
        'Background selection',...
        'Yes, keep it','No, select another file','Cancel','Cancel');
    switch choice
        case 'Yes, keep it'        
            udata.img = udata.img - udata.bgr;  
            set(hFigXRD,'UserData',udata);
            return;
        case 'No, select another file'
            hFig = findall(0,'tag','xrd_bgr');
            close(hFig);
            hBgr = findall(0,'tag','xrd_img_nobgr');
            close(hBgr);
            xrd_LoadBgrFcn;
            xrd_ApplyBgrFcn;
            return;
        case 'Cancel'
            return;
    end        
end

% Function for loading energy spectrum file
function xrd_LoadSpecFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if ~isfield(udata,'NHP')
        errordlg('You forgot to input the number of harmonic peaks','Error');
        return;
    end
    [filename, pathname] = uigetfile({'*.txt','Text (*.txt)'; ...
        '*.mat','Matlab data (*.mat)'}, 'Select an energy spectrum file');
    ftype = strfind(filename,'.mat');
    if isequal(filename,0), return; end
    cd(pathname);
    if ~isempty(ftype)
        tmp = load(filename);
        vars = whos('-file', filename);
        E_spec = tmp.(vars.name);
        udata.E0 = E_spec(:,1);
        udata.I0 = E_spec(:,2);
    elseif isempty(ftype)
        E_spec = dlmread(filename);
        udata.E0 =  E_spec(:,1);
        udata.I0 =  E_spec(:,2);
    end
    hdlg = msgbox(['Use cursor to cicle out ' num2str(udata.NHP) ' peaks in the spectrum plot.'],'Find peaks','modal');
    set(gcf,'Resize','on');
    uiwait(hdlg);
    figure('tag','xrd_spectrum'); plot(udata.E0,udata.I0); hold on
    title('Energy spectrum');
    xlabel('Energy (keV)'); ylabel('Flux');    
    for ii = 1:udata.NHP
        rect = getrect(gca);
        I_temp = udata.I0;
        I_temp(udata.E0<rect(1)|udata.E0>rect(1)+rect(3)) = 0;
        [pks(ii) No] = max(I_temp);
        E(ii) = udata.E0(No);    
        plot(E(ii),pks(ii),'ro'); hold on
    end
    udata.Specname = filename;
    udata.E = E;
    udata.E1 = round(E(1)*100)/100;
    lamda = 4.136e-15*2.99792458e8./udata.E1*1e7;
    udata.lamda = 4.136e-15*2.99792458e8./udata.E*1e7; 
    uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',filename,...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize-2,...
    'tag','Energy spec',...
    'Position',[0.1 0.21 0.78 0.08]); 
    uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',num2str(lamda,3),...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize,...
    'tag','Wavelength',...
    'Position',[0.785 0.26 0.25 0.08]);         
    set(findall(hFigXRD,'tag','EditE1'),'string',udata.E1);
    set(hFigXRD,'UserData',udata);
end

% Function for loading absorption file
function xrd_LoadAbsFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');  
    [filename, pathname] = uigetfile({'*.txt','Text (*.txt)'; ...
        '*.mat','Matlab data (*.mat)'}, 'Select absorption file');    
    if isequal(filename,0), return; end
    cd(pathname);
    ftype = strfind(filename,'.mat');
    if ~isempty(ftype)
        tmp = load(filename);
        vars = whos('-file', filename);
        Abs_file = tmp.(vars.name);
        udata.Eabs = Abs_file(:,1);
        udata.Iabs = Abs_file(:,2);
    elseif isempty(ftype)
        Abs_file = dlmread(filename);
        udata.Eabs =  Abs_file(:,1);
        udata.Iabs =  Abs_file(:,2);
    end    
    figure('tag','xrd_Abs');
    plot(udata.Eabs,udata.Iabs);
    xlabel('Energy (eV)'); ylabel('Transmission(a.u.)');
    uicontrol('Parent',hPanel3,...
    'style','Text',...
    'Units','norm',...
    'backgroundcolor',panelcolor,...
    'String',filename,...
    'HorizontalAlignment','left',...
    'Fontsize',fontSize-2,...
    'tag','Show absorption file',...
    'Position',[0.1 0.02 0.78 0.08]); 
    set(hFigXRD,'UserData',udata);
end

% Function for applying asorption file
function xrd_ApplyAbsFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');  
    if ~isfield(udata,'I0')
        errordlg('You need to load energy spectrum first!','Error');        
        return;
    elseif ~isfield(udata,'Iabs')
        errordlg('You do not have a background file to apply!','Error');        
        return;
    end
    E1 = udata.E0*1000; E2 = udata.Eabs;    
    I1 = udata.I0; I2 = udata.Iabs;    
    I2 = interp1(E2,I2,E1); I2(E1<E2(1)) = 0; I2(E1>E2(end)) = 1;
    I3 = I1.*I2;
    figure('tag','xrd_Espec_All');
    plot(E1/1000,I1);  hold on
    plot(E1/1000,I2*max(I1),'r');plot(E1/1000,I3,'k');
    xlabel('Energy (keV)'); ylabel('Flux (a.u.)')
    legend('Original energy spectrum','Absorption factor','Modified energy spectrum');    
    choice = questdlg('Do you want to use this absorption file?',...
        'Sample absorption',...
        'Yes, keep it','No, select another file','Cancel','Cancel');
    switch choice
        case 'Yes, keep it'        
            udata.I0 = udata.I0.*I2;
            figure('tag','xrd_Espec_Abs');
            plot(udata.E0,udata.I0);
            xlabel('Energy (keV)'); ylabel('Flux (a.u.)')
            title('Energy spectrum with absorption factor');     
            for ii =1:udata.NHP                
                Iabs_H(ii) = I3(udata.E0 == udata.E(ii));                
            end
            udata.Iabs_H = Iabs_H/max(Iabs_H);
            set(hFigXRD,'UserData',udata);
            return;
        case 'No, select another file'
            hFig = findall(0,'tag','xrd_Abs');
            close(hFig);
            hFig = findall(0,'tag','xrd_Espec_All');
            close(hFig);
            xrd_LoadAbsFcn;
            xrd_ApplyAbsFcn;
            return;
        case 'Cancel'
            return;
    end        
end

% Function for estimating direction beam position
function xrd_EstDBFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    choice = questdlg('Estimate direct beam position from:','Find direct beam',...
        'Detector location','Diffraction pattern','Cancel','Cancel');
    switch choice
        case 'Detector location'        
            if ~isfield(udata,'SDD') || ~isfield(udata,'DA') ||...
               ~isfield(udata,'PS') || ~isfield(udata,'sz_img')
                errordlg('You forgot to input some experiment parameters');
                return;
            end
            dbx = udata.sz_img(2)/2-(udata.SDD*1000*tan(udata.DA*pi/180))/udata.PS;
            %dby = udata.sz_img(1)/2;
            udata.DBX = round(dbx); set(findall(hFigXRD,'tag','EditDBX'),'string',udata.DBX);
            %udata.DBY = round(dby); set(findall(hFigXRD,'tag','EditDBY'),'string',udata.DBY);
        case 'Diffraction pattern'
            if ~isfield(udata,'img')
                errordlg('You forgot to load diffraction data!','Error');
                return;
            elseif ~isfield(udata,'DA')
                errordlg('You forgot to input the detector angle!','Error');
                return;
            elseif ~isfield(udata,'DBn')
                errordlg('You forgot to input the number behind [Find (00)]!','Error');
                return;
            elseif isnan(udata.DBn)
                errordlg('You forgot to input the number behind [Find (00)]!','Error');
                return;
            end    
            hdlg = msgbox({'In the diffraction pattern appearing next, click three points to find direct beam.';
                            ' ';
                            '(1) Single click first two points';
                            '(2) Double click the last point to complete';
                            '(3) Then a window will pop up for information about this ring';
                            '(4) Calculate q map again to check if simulated rings matching the data';
                            '(5) Optimize Direct beam x and y if needed'},...
                            'Estimate direct beam position');
            set(gcf,'Resize','on');
            uiwait(hdlg);
            ftemp = figure('outerposition',[1 1 screenSize(3) screenSize(4)]);    
            imagesc(udata.img); axis image; caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);
            for ii = 1:udata.DBn
                title(['Select No.' num2str(ii) ' ring']);
                [x y] = getpts(gca);
                tth = udata.DA*pi/180;
                y0 = (((x(3)-x(1))*(y(1)^2-y(2)^2)-(x(2)-x(1))*(y(1)^2-y(3)^2))*cos(tth)^2-...
                     (x(2)-x(1))*(x(3)-x(1))*(x(2)-x(3)))/...
                     (((x(3)-x(1))*(y(1)-y(2))-(x(2)-x(1))*(y(1)-y(3)))*2*cos(tth)^2);
                x0 = (((y(2)-y0)^2-(y(1)-y0)^2)*cos(tth)^2)/(2*(x(2)^2-x(1)^2));
                a  = sqrt((y(1)-y0)^2+(x(1)-x0)^2/cos(tth)^2);    
                xx = a*cos(tth)+x0;
                prompt = {'Energy (keV)','d-spacing (A)'};
                dlg_title = ['Information about No.' num2str(ii) ' ring'];
                para_ring = inputdlg(prompt,dlg_title, [1,length(dlg_title)+20]);
                E = str2double(para_ring{1});
                lamda = 4.136e-15*2.99792458e8/E*1e7;  
                d_ring  = str2double(para_ring{2});
                udata.ring_d = d_ring;
                udata.ring_l = lamda;
                S2D = udata.SDD/cos(tth);
                p_size = udata.PS/1000;
                theta = asin(lamda/2/d_ring);
                x00 = xx-S2D*tan(2*theta)/(p_size*(cos(tth)+sin(tth)*tan(2*theta)));
                dbx(ii) = x00;
                dby(ii) = y0;
            end
            udata.dbx = dbx;
            udata.dby = dby;
            udata.DBX = round(mean(dbx));
            udata.DBY = round(mean(dby));
            set(findall(hFigXRD,'tag','EditDBY'),'string',udata.DBY);
            close(ftemp);
        case 'Cancel'
            return;            
    end    
    set(findall(hFigXRD,'tag','EditDBX'),'string',udata.DBX);   
    set(hFigXRD,'UserData',udata);      
end

% Function for calculating q map
function xrd_CalQmapFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if ~isfield(udata,'img')
        %errordlg('You forgot to load diffraction data!','Error');
        udata.img = zeros(udata.sz_img);        
    elseif ~isfield(udata,'SDD') || ~isfield(udata,'DA') ||...
       ~isfield(udata,'PS') || ~isfield(udata,'SF') ||...
       ~isfield(udata,'DBY') || ~isfield(udata,'DBX') || ~isfield(udata,'NHP')
        errordlg('You forgot to input some parameters!','Error');
        return;      
    elseif isnan(udata.SDD) || isnan(udata.DA) ||...
       isnan(udata.PS) || isnan(udata.SF) ||...
       isnan(udata.DBY) || isnan(udata.DBX) || isnan(udata.NHP)       
        errordlg('You forgot to input some parameters!','Error');
        return;         
    elseif (~isfield(udata,'E') && ~isfield(udata,'E1'))
        errordlg('There is no energy parameter!','Error');
        return;
    end
    if isfield(udata,'E1') && isfield(udata,'E')
        logE = mean(double(isnan(udata.E)));
        if logE == 1 && isnan(udata.E1)
            errordlg('There is no energy parameter!','Error');
            return;
        end
    end     
    if isfield(udata,'img') && isfield(udata,'sz_img');
        sz = size(udata.img);
        if ~isequal(sz,udata.sz_img)
           errordlg('Wrong image dimension!','Error');
            return;
        end
    end
    if isfield(udata,'lamda')
        lamda = udata.lamda;
    else
        errordlg('There is no energy parameter!','Error');
        return;
    end

    I = imresize(udata.img,1/udata.SF);    
    D = ceil(udata.sz_img/udata.SF);
    if isfield(udata,'mask')
        mask = imresize(udata.mask,1/udata.SF);
    else
        udata.mask = ones(udata.sz_img);
        mask = imresize(udata.mask,1/udata.SF);
    end
    a_i = 0 *pi/180;    
    SDD = udata.SDD;
    p_size = udata.PS*udata.SF/1000;
    tth = udata.DA*pi/180;
    DB = [udata.DBY/udata.SF, udata.DBX/udata.SF];        
    if isfield(udata,'Qres');
        q_res = udata.Qres;   
    elseif ~isfield(udata,'Qres');
        q_res = 0.01;
    end
    thf_map = zeros(D);
    af_map  = zeros(D);
    qx_map  = zeros(D);
    qy_map  = zeros(D);
    qz_map  = zeros(D);
    q_win1 = false(D);
    q_win2 = false(D);
    phi_map = zeros(D);
    xrd_hklFcn;
    d_hkl1 = udata.d_hkl1;
    q_hkl1 = 2*pi./d_hkl1;    
    d_hkl2 = udata.d_hkl2;
    q_hkl2 = 2*pi./d_hkl2;    
    for ii = 1:D(1)
        for jj = 1:D(2)                
            thf_map(ii,jj) = atan(cos(tth)/(SDD/cos(tth)/((jj-DB(2))*p_size)-sin(tth)));
            L = SDD/cos(thf_map(ii,jj)-tth);
            af_map(ii,jj) = atan((DB(1)-ii)*p_size/L)-a_i;
            qx_map(ii,jj) = 2*pi/lamda(1) * (cos(af_map(ii,jj))*cos(thf_map(ii,jj))-cos(a_i));
            qy_map(ii,jj) = 2*pi/lamda(1) * (cos(af_map(ii,jj))*sin(thf_map(ii,jj)));
            qz_map(ii,jj) = 2*pi/lamda(1) * (sin(af_map(ii,jj))+sin(a_i)); 
        end    
    end    
    for ii = 1:D(1)
        for jj = 1:D(2)
            if  ((jj<DB(2)) && (ii>=DB(1)))                                 
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi;
            elseif ((jj>=DB(2)) && (ii>DB(1)))
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi + 180;
            elseif ((jj>=DB(2)) && (ii<=DB(1)))
                phi_map(ii,jj) = abs(atan((DB(1)-ii)/(jj-DB(2))))*180/pi + 180;
            elseif ((jj<DB(2)) && (ii<DB(1)))    
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi + 360;
            end                
        end
    end   
    q_map = sqrt(qx_map.^2+qy_map.^2+qz_map.^2);
    figure;
    set(gcf,'Outerposition',[screenSize(3)/6 screenSize(4)/6 screenSize(3)*2/3 screenSize(4)*2/3])
    subplot(1,3,1); [cc,q_handle] = contourf(q_map);
    axis image; title('q map (1st harmonic)');
    set(q_handle,'ShowText','on')
    set(gca,'Ydir','reverse');        
    subplot(1,3,2); [cc,phi_handle] = contourf(phi_map); axis image;set(gca,'Ydir','reverse');
    set(phi_handle,'ShowText','on')
    for ii = 1:length(q_hkl1)
        q_win1 = q_win1 | (q_map>=q_hkl1(ii)-q_res & q_map<=q_hkl1(ii)+q_res);
    end
    for ii = 1:length(q_hkl2)
        q_win2 = q_win2 | (q_map>=q_hkl2(ii)-q_res & q_map<=q_hkl2(ii)+q_res);
    end
    I_temp = I;
    I_temp(q_win1) = -1e6;
    I_temp(q_win2) = 1e6;
    subplot(1,3,3); imagesc(I_temp); axis image; colormap(jet);
    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);    
    title('Diffraction labeled with peak positions (1st harmonic)');    
    %figure;imagesc(I_temp); axis image; axis off; colormap(jet);
    %caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);
    udata.q_map = imresize(q_map,udata.SF);  
    udata.phi_map = imresize(phi_map,udata.SF);  
    udata.currentE = udata.E1;
    udata.currentSDD = udata.SDD;
    udata.currentDA = udata.DA;
    udata.currentPS = udata.PS;
    udata.currentSF = udata.SF;
    udata.currentDBX = udata.DBX;
    udata.currentDBY = udata.DBY;   
    udata.af_map = af_map;
    udata.thf_map = thf_map;
    udata.L = L;
    udata.I_temp = I_temp;
    set(hFigXRD,'UserData',udata);
end

% Function for predicting diffraction pattern
function xrd_SimuDPFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if ~isfield(udata,'SDD') || ~isfield(udata,'DA') ||...
       ~isfield(udata,'PS') || ~isfield(udata,'SF') ||...
       ~isfield(udata,'DBY') || ~isfield(udata,'DBX') || ...
       ~isfield(udata,'sz_img') || ~isfield(udata,'NHP')
        errordlg('You forgot to input some parameters!','Error');
        return;      
    elseif isnan(udata.SDD) || isnan(udata.DA) ||...
       isnan(udata.PS) || isnan(udata.SF) ||...
       isnan(udata.DBY) || isnan(udata.DBX) ||...
       isnan(udata.sz_img(1)) || isnan(udata.sz_img(2)) || isnan(udata.NHP)
        errordlg('You forgot to input some parameters!','Error');
        return;
    elseif (~isfield(udata,'E') && ~isfield(udata,'E1'))
        errordlg('There is no energy parameter!','Error');
        return;
    end   
    if isfield(udata,'E1') && isfield(udata,'E')
        logE = mean(double(isnan(udata.E)));
        if logE == 1 && isnan(udata.E1)
            errordlg('There is no energy parameter!','Error');
            return;
        end
    end
    if isfield(udata,'mask')
        mask = imresize(udata.mask,1/udata.SF);
    else
        udata.mask = ones(udata.sz_img);
        mask = imresize(udata.mask,1/udata.SF);
    end
    D = udata.sz_img/udata.SF;
    %D = round(D/2)*2;                                                       % Make sure dimension of the data is even numbers
    a_i = 0;
    th_i = 0;                                                           % Single crystal case
    S2D = udata.SDD/cos(udata.DA*pi/180);
    p_size = udata.PS*udata.SF/1000;
    tth = udata.DA*pi/180;
    DB = [udata.DBY/udata.SF, udata.DBX/udata.SF];
    if isfield(udata,'Qres')
        if ~isnan(udata.Qres)
            q_res = udata.Qres*udata.SF;
        else
            q_res = 0.03*udata.SF;                                          % This parameter 0.03 may need to change for different experiment
        end
    else
        q_res = 0.03*udata.SF;       
    end
    q_map  = zeros(D);
    I_cal = zeros(D);
    xrd_hklFcn;
    d_hkl1 = udata.d_hkl1;    
    q_hkl1 = 2*pi./d_hkl1;        
    d_hkl2 = udata.d_hkl2;    
    q_hkl2 = 2*pi./d_hkl2;        
    
    choice = questdlg('Do you want to get a schematic pattern with only diffraction peak positions indicated, or a more realistic one with absorption factor considered?',...
        'Simulating diffraction pattern',...
        'Schematic','Realistic','Cancel','Cancel');
    switch choice
        case 'Schematic'                    
            lamda = udata.lamda;
            for mm = 1:udata.NHP            
                for ii = 1:D(1)
                    for jj = 1:D(2)                
                        thf_map = atan(cos(tth)/(S2D/((jj-DB(2))*p_size)-sin(tth)));                        
                        L = S2D*cos(tth)/cos(thf_map-tth);
                        af_map = atan((DB(1)-ii)*p_size/L)-a_i*pi/180;
                        qx_map = 2*pi/lamda(mm) * (cos(af_map)*cos(thf_map)-cos(a_i*pi/180));
                        qy_map = 2*pi/lamda(mm) * (cos(af_map)*sin(thf_map));
                        qz_map = 2*pi/lamda(mm) * (sin(af_map)+sin(a_i*pi/180)); 
                        q_map(ii,jj) = sqrt(qx_map.^2+qy_map.^2+qz_map.^2);
                    end
                end       
                q_win = false(D);
                for ii = 1:length(q_hkl1)
                    q_win = q_win | (q_map>=q_hkl1(ii)-q_res & q_map<=q_hkl1(ii)+q_res);                    
                end            
                for jj = 1:length(q_hkl2)
                    q_win = q_win | (q_map>=q_hkl2(jj)-q_res & q_map<=q_hkl2(jj)+q_res);
                end
                I_cal(q_win) = mm;                
            end
            figure; imagesc(I_cal); axis image;colormap(jet(udata.NHP+1));
            title('From blue towards red: 1st to nth harmonic'); 
        case 'Realistic'
            if ~isfield(udata,'E0')
                errordlg('You need to load an energy spectrum file!','Error');
                return;
            end
            
            prompt = {'Input a number from 0.1-3 (coarse to fine) as energy resolution. 1 is typical'};
                    dlg_title = 'Energy resolution';
                    para_ang = inputdlg(prompt,dlg_title, [1,50]);
                    Er = str2double(para_ang{1});                     
                    
            hdlg = msgbox({'In the energy spectrum appearing next, roughly click where the peaks are. Double click the last point to confirm';
                },'Find peaks');
            set(gcf,'Resize','on');
            uiwait(hdlg);
            %Er = 0.1;            % Only temp
            N = udata.sz_img(2)*Er;                 
            figure; plot(udata.E0,udata.I0);
            [x y] = getpts;    
            
%            x = 23.66;  % Only temp
            for ii = 1:length(x)
                Es = x(ii)-2;
                Ee = x(ii)+2;    
                I_temp = udata.I0(udata.E0>Es & udata.E0<Ee);
                E_temp = udata.E0(udata.E0>Es & udata.E0<Ee);
                [II n] = max(I_temp);
                Ep(ii) = E_temp(n);
                M(ii) = find(udata.E0 == Ep(ii));
            end
            MM = [1 M length(udata.E0)];
            I0 = [];
            E0 = [];
            for ii = 1:length(x)+1    
                N_seg = (MM(ii+1)-MM(ii))/(MM(end)-1)*N;    
                E_seg = linspace(udata.E0(MM(ii)),udata.E0(MM(ii+1)),N_seg);
                I_seg = interp1(udata.E0(MM(ii):MM(ii+1)),udata.I0(MM(ii):MM(ii+1)),E_seg); 
                E0 = [E0 E_seg(2:end)];
                I0 = [I0 I_seg(2:end)];
            end
            figure; plot(E0,I0,'ro'); hold on; plot(udata.E0,udata.I0);
            title('Points counted for simulating diffraction pattern'); 
            waitObj = waitbar(0,'','name','Simulation process monitor');
            for nn = 1:length(E0)
                lamda = 4.136e-15*2.99792458e8./E0(nn)*1e7;   
                I_s1 = zeros(D);
                I_s2 = zeros(D);
                for ii = 1:D(1)
                    for jj = 1:D(2)                
                        thf_map = atan(cos(tth)/(S2D/((jj-DB(2))*p_size)-sin(tth)));
                        L = S2D*cos(tth)/cos(thf_map-tth);
                        af_map = atan((DB(1)-ii)*p_size/L)-a_i*pi/180;
                        qx_map = 2*pi/lamda * (cos(af_map)*cos(thf_map)-cos(a_i*pi/180));
                        qy_map = 2*pi/lamda * (cos(af_map)*sin(thf_map));
                        qz_map = 2*pi/lamda * (sin(af_map)+sin(a_i*pi/180)); 
                        q_map(ii,jj) = sqrt(qx_map.^2+qy_map.^2+qz_map.^2);
                    end
                end
                %q_res = 0.01;    % Only temp
                for mm = 1:length(q_hkl1)
                    I_temp = zeros(D);    
                    if ~isnan(udata.I1(mm))
                        q_win = q_map>=q_hkl1(mm)-q_res & q_map<=q_hkl1(mm)+q_res;
                        I_temp(q_win) = I0(nn)/max(I0)*udata.I1(mm);                        
                        I_s1 = I_s1 + I_temp;
                    end
                end 
                for mm = 1:length(q_hkl2)
                    I_temp = zeros(D);    
                    if ~isnan(udata.I2(mm))
                        q_win = q_map>=q_hkl2(mm)-q_res & q_map<=q_hkl2(mm)+q_res;
                        I_temp(q_win) = I0(nn)/max(I0)*udata.I2(mm);                        
                        I_s2 = I_s2 + I_temp;
                    end
                end
                if isfield(udata,'P1perc') && isfield(udata,'P2perc')
                    if ~isnan(udata.P1perc') && ~isnan(udata.P2perc)
                        if udata.P1perc + udata.P2perc == 100
                            I_cal = I_cal + I_s1*udata.P1perc/100 + I_s2*udata.P2perc/100;
                        elseif udata.P1perc + udata.P2perc ~=100
                            errordlg('The sum of contents of two phases need to be 100!','Error');
                            close(waitObj);
                            return;
                        end
                    elseif ~isnan(udata.P1perc) && isnan(udata.P2perc)
                        I_cal = I_cal + I_s1;
                    elseif isnan(udata.P1perc) && ~isnan(udata.P2perc)
                        I_cal = I_cal + I_s2;
                    elseif isnan(udata.P1perc) && isnan(udata.P2perc)
                        I_cal = I_cal + I_s1 + I_s2;
                    end
                elseif isfield(udata,'P1perc') || ~isfield(udata,'P2perc')
                    I_cal = I_cal + I_s1;
                elseif ~isfield(udata,'P1perc') || isfield(udata,'P2perc')
                    I_cal = I_cal + I_s2;
                end                
                waitbar(nn/length(E0),waitObj,'Simulating diffraction pattern, please wait...')
            end
            close(waitObj);             
            figure; imagesc(I_cal); axis image; colormap(gray);caxis([-10 max(I_cal(:))+10]);
            title('Simulated diffraction pattern');  
            udata.N = N_seg;
            udata.E_seg = E_seg;
        case 'Cancel'
            return;            
    end
    lamda = udata.lamda(1);
    for ii = 1:D(1)
        for jj = 1:D(2)                
            thf_map = atan(cos(tth)/(S2D/((jj-DB(2))*p_size)-sin(tth)));            
            L = S2D*cos(tth)/cos(thf_map-tth);
            af_map = atan((DB(1)-ii)*p_size/L)-a_i*pi/180;
            qx_map = 2*pi/lamda * (cos(af_map)*cos(thf_map)-cos(a_i*pi/180));
            qy_map = 2*pi/lamda * (cos(af_map)*sin(thf_map));
            qz_map = 2*pi/lamda * (sin(af_map)+sin(a_i*pi/180)); 
            q_map(ii,jj) = sqrt(qx_map.^2+qy_map.^2+qz_map.^2);
        end
    end
    udata.I_cal = imresize(I_cal,udata.SF);    
    udata.q_map = imresize(q_map,udata.SF);  
    udata.currentE = udata.E1;
    udata.currentSDD = udata.SDD;
    udata.currentDA = udata.DA;
    udata.currentPS = udata.PS;
    udata.currentSF = udata.SF;
    udata.currentDBX = udata.DBX;
    udata.currentDBY = udata.DBY; 

    set(hFigXRD,'UserData',udata);
end

% Function for calculating d_hkl
function xrd_hklFcn(varargin)
    if ~isfield(udata,'LPa1')
        udata.h1 = NaN;
        udata.k1 = NaN;
        udata.l1 = NaN;
        udata.I1 = NaN;
        udata.LPa1 = NaN;
        udata.LPb1 = NaN;
        udata.LPc1 = NaN;
        udata.Alpha1 = NaN;
        udata.Beta1 = NaN;
        udata.Gamma1 = NaN;
        udata.CS1 = 1;
    end
        
    h = udata.h1;
    k = udata.k1;
    l = udata.l1;
    a = udata.LPa1;
    b = udata.LPb1;
    c = udata.LPc1;
    Alpha = udata.Alpha1*pi/180;
    Beta = udata.Beta1*pi/180;
    Gamma = udata.Gamma1*pi/180;
    if udata.CS1 == 1                                                        % Cubic
        d_hkl = a./sqrt(h.^2+k.^2+l.^2);
    elseif udata.CS1 == 2                                                    % Tetragonal
        d_hkl = 1./sqrt((h.^2+k.^2)/a^2+l.^2/c^2);
    elseif udata.CS1 == 3                                                    % Orthorhombic
        d_hkl = 1./sqrt(h.^2/a^2+k.^2/b^2+l.^2/c^2);
    elseif udata.CS1 == 4                                                    % Hexagonal
        d_hkl = 1./sqrt(4/3*(h.^2+h.*k+k.^2)/a^2+l.^2/c^2);
    elseif udata.CS1 == 5                                                    % Monoclinic
        d_hkl = sin(Beta)./sqrt(h.^2/a^2+k.^2*sin(Beta)^2/b^2+l.^2/c^2-2*h.*l*cos(Beta)/a/c);
    elseif udata.CS1 == 6                                                    % Rhombohedral
        d_hkl = 1./sqrt(((h.^2+k.^2+l.^2)*sin(Alpha)^2+2*(h.*k+k.*l+h.*l)...
            *cos(Alpha)^2-cos(Alpha))./(a^2*(1-3*cos(Alpha)^2+2*cos(Alpha)^3)));
    elseif udata.CS1 == 7                                                    % Triclinic
        V = a*b*c*sqrt(1-(cos(Alpha))^2-(cos(Beta))^2-(cos(Gamma))^2+2*cos(Alpha)*cos(Beta)*cos(Gamma));
        S11 = (b*c*sin(Alpha))^2;
        S22 = (a*c*sin(Beta))^2;
        S33 = (a*b*sin(Gamma))^2;
        S12 = a*b*c^2*(cos(Alpha)*cos(Beta)-cos(Gamma));
        S23 = a^2*b*c*(cos(Beta)*cos(Gamma)-cos(Alpha));
        S13 = a*b^2*c*(cos(Gamma)*cos(Alpha)-cos(Beta));
        d_hkl = V./(S11*h.^2+S22*k.^2+S33*l.^2+2*S12.*h.*k+2*S23.*k.*l+2*S13.*h.*l);
    end        
    udata.d_hkl1 = d_hkl;      
    
    if ~isfield(udata,'LPa2')
        udata.h2 = NaN;
        udata.k2 = NaN;
        udata.l2 = NaN;
        udata.I2 = NaN;
        udata.LPa2 = NaN;
        udata.LPb2 = NaN;
        udata.LPc2 = NaN;
        udata.Alpha2 = NaN;
        udata.Beta2 = NaN;
        udata.Gamma2 = NaN;
        udata.CS2 = 1;
    end
    h = udata.h2;
    k = udata.k2;
    l = udata.l2;
    a = udata.LPa2;
    b = udata.LPb2;
    c = udata.LPc2;
    Alpha = udata.Alpha2*pi/180;
    Beta = udata.Beta2*pi/180;
    Gamma = udata.Gamma2*pi/180;
    if udata.CS2 == 1                                                        % Cubic
        d_hkl = a./sqrt(h.^2+k.^2+l.^2);
    elseif udata.CS2 == 2                                                    % Tetragonal
        d_hkl = 1./sqrt((h.^2+k.^2)/a^2+l.^2/c^2);
    elseif udata.CS2 == 3                                                    % Orthorhombic
        d_hkl = 1./sqrt(h.^2/a^2+k.^2/b^2+l.^2/c^2);
    elseif udata.CS2 == 4                                                    % Hexagonal
        d_hkl = 1./sqrt(4/3*(h.^2+h.*k+k.^2)/a^2+l.^2/c^2);
    elseif udata.CS2 == 5                                                    % Monoclinic
        d_hkl = sin(Beta)./sqrt(h.^2/a^2+k.^2*sin(Beta)^2/b^2+l.^2/c^2-2*h.*l*cos(Beta)/a/c);
    elseif udata.CS2 == 6                                                    % Rhombohedral
        d_hkl = 1./sqrt(((h.^2+k.^2+l.^2)*sin(Alpha)^2+2*(h.*k+k.*l+h.*l)...
            *cos(Alpha)^2-cos(Alpha))./(a^2*(1-3*cos(Alpha)^2+2*cos(Alpha)^3)));
    elseif udata.CS1 == 7                                                    % Triclinic
        V = a*b*c*sqrt(1-(cos(Alpha))^2-(cos(Beta))^2-(cos(Gamma))^2+2*cos(Alpha)*cos(Beta)*cos(Gamma));
        S11 = (b*c*sin(Alpha))^2;
        S22 = (a*c*sin(Beta))^2;
        S33 = (a*b*sin(Gamma))^2;
        S12 = a*b*c^2*(cos(Alpha)*cos(Beta)-cos(Gamma));
        S23 = a^2*b*c*(cos(Beta)*cos(Gamma)-cos(Alpha));
        S13 = a*b^2*c*(cos(Gamma)*cos(Alpha)-cos(Beta));
        d_hkl = V./(S11*h.^2+S22*k.^2+S33*l.^2+2*S12.*h.*k+2*S23.*k.*l+2*S13.*h.*l);
    end        
    udata.d_hkl2 = d_hkl;      
    set(hFigXRD,'UserData',udata);
end

% Function for defining region of interest
function xrd_DefROIFcn(varargin)  
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if ~isfield(udata,'img')
        errordlg('You forgot to load diffraction data!','Error');
        return;
    end
    choice = questdlg('How do you want to define ROI?', 'ROI definition','Full frame','Click to define','Cancel','Cancel');
    switch choice
        case 'Full frame' 
            udata.mask = ones(udata.sz_img);
        case 'Click to define'
            hdlg = msgbox({'In the diffraction pattern appearing next, define the region of interest';
                            ' ';
                            '(1) Use cursor to guide';
                            '(2) Single click multiple times to define the region';
                            '(3) Match last point with first point(cursor changes from cross to circle)';
                            '(4) Adjust the region by dragging the joints if necessary';
                            '(5) Double click to confirm the selected region'},...
                            'How to define ROI');
            set(gcf,'Resize','on');
            uiwait(hdlg);
            ftemp = figure('outerposition',[1 1 screenSize(3) screenSize(4)]);    
            imagesc(udata.img); axis image; caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);
            title('Define ROI');
            fhandle = impoly(gca); p = wait(fhandle);   
            if isempty(p), return; end
            mask_logic = poly2mask(p(:,1),p(:,2),udata.sz_img(1), udata.sz_img(2));                        
            mask = double(mask_logic);                                                
            mask(mask==0) = NaN;
            udata.mask = mask;        
            close(ftemp);
        case 'Cancel'
            return;                
    end
    figure; imagesc(udata.img.*udata.mask); axis image; colorbar; 
    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);    
    set(hFigXRD,'UserData',udata);
end

% Function to apply current mask
function xrd_DispalyROIFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if ~isfield(udata,'img')
        errordlg('You forgot to load diffraction data!','Error');
        return;
    end
    if ~isfield(udata,'mask')
        errordlg('You do not have a ROI mask to show!','Error');
        return;
    elseif isfield(udata,'mask')
        if mean(double(udata.mask(:)))==1
            errordlg('You do not have a ROI mask to show!','Error');
            return;  
        elseif ~isequal(size(udata.mask), udata.sz_img)
        errordlg('Please re-define the ROI','Error');
        return;
        end
    end        
    figure; imagesc(udata.img.*udata.mask); axis image
    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar
    if isfield(udata,'I_cal')
        figure; imagesc(udata.I_cal.*udata.mask); axis image
        caxis([-max(udata.I_cal(:))/5 max(udata.I_cal(:))*4/5]);
    end
end

% Function for getting radially averaged I(q);
function xrd_CalIqFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');    
    if ~isfield(udata,'Qnum') || ~isfield(udata,'Qres')
        errordlg('You forgot to input the number of points and averaging resolution!','Error');
        return;
    elseif ~isfield(udata,'img')
        errordlg('You forgot to load diffraction data!','Error');
        return;
    elseif ~isfield(udata,'E1')
        errordlg('You need to calculate q map first!','Error');
        return;
    elseif ~isfield(udata,'q_map')
        errordlg('You need to calculate q map first!','Error');
        return;
    elseif isnan(udata.Qnum) || isnan(udata.Qres)        
        errordlg('You forgot to input the number of points and averaging resolution!','Error');
        return;
    elseif ~isequal(udata.E1,udata.currentE) || ...
            ~isequal(udata.SDD,udata.currentSDD) || ...
            ~isequal(udata.DA,udata.currentDA) || ...
            ~isequal(udata.PS,udata.currentPS) || ...
            ~isequal(udata.SF,udata.currentSF) || ...
            ~isequal(udata.DBX,udata.currentDBX) || ...
            ~isequal(udata.DBY,udata.currentDBY)
        errordlg('You need to calculate q map again due to the change of parameters!','Error');
        return;
    end    
    if ~isfield(udata,'mask')
        udata.mask = ones(udata.sz_img);
    end        
    img = imresize(udata.img.*udata.mask,1/udata.SF);    
    q_map = imresize(udata.q_map.*udata.mask,1/udata.SF);
    q = linspace(min(q_map(:)),2*pi/udata.lamda(1),udata.Qnum);
    q_res = udata.Qres;
    I_avg = zeros(1,udata.Qnum);
    for ii = 1:udata.Qnum
        q_win = q_map>=q(ii)-q_res & q_map<=q(ii)+q_res;
        I_vec = img(q_win);
        I_avg(ii) = mean(I_vec(~isnan(I_vec)));
    end
    figure; plot(q,I_avg)
    xlabel('q (A^{-1})'); ylabel('Intensity (a.u.)')    
    title('q defined by 1st harmonic energy')
    udata.q = q;
    udata.Iq = I_avg;
    set(hFigXRD,'UserData',udata);
end

function xrd_CalIthFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');   
    if ~isfield(udata,'img')
        errordlg('You forgot to load diffraction data!','Error');
        return;
    elseif ~isfield(udata,'E1') || ~isfield(udata,'currentE')
        errordlg('You need to calculate q map first!','Error');
        return;
    elseif ~isfield(udata,'Qnum') || ~isfield(udata,'Qres')
        errordlg('You forgot to input number of points and averaging resolution!','Error');
        return;
    elseif ~isfield(udata,'q_map')
        errordlg('You need to calculate q map first!','Error');
        return;
    elseif isnan(udata.Qnum) || isnan(udata.Qres)        
        errordlg('You forgot to input the number of points and averaging resolution!','Error');
        return;            
    elseif  ~isequal(udata.E1,udata.currentE) || ...
            ~isequal(udata.SDD,udata.currentSDD) || ...
            ~isequal(udata.DA,udata.currentDA) || ...
            ~isequal(udata.PS,udata.currentPS) || ...
            ~isequal(udata.SF,udata.currentSF) || ...
            ~isequal(udata.DBX,udata.currentDBX) || ...
            ~isequal(udata.DBY,udata.currentDBY)
        errordlg('You need to calculate q map again due to the change of parameters!','Error');
        return;
    end
    if ~isfield(udata,'mask')
        udata.mask = ones(udata.sz_img);
    elseif isfield(udata,'mask') && ~isequal(size(udata.mask), udata.sz_img)
        errordlg('Please re-define the ROI!','Error');
        return;
    end        
    img = imresize(udata.img.*udata.mask,1/udata.SF); 
    q_map = imresize(udata.q_map.*udata.mask,1/udata.SF);
    %q = linspace(min(q_map(:)),2*pi/udata.lamda(1),udata.Qnum);
    q = linspace(min(q_map(:)),max(q_map(:)),udata.Qnum);
    q_res = udata.Qres;
    I_avg = zeros(1,udata.Qnum);
    th = 2*180/pi*asin(q*udata.lamda(1)/4/pi);
    
    DB = [udata.DBY/udata.SF, udata.DBX/udata.SF]; 
    D = ceil(udata.sz_img/udata.SF);                        
    phi_map = zeros(D);
    for ii = 1:D(1)
        for jj = 1:D(2)
            if  ((jj<DB(2)) && (ii>=DB(1)))                                 
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi;
            elseif ((jj>=DB(2)) && (ii>DB(1)))
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi + 180;
            elseif ((jj>=DB(2)) && (ii<=DB(1)))
                phi_map(ii,jj) = abs(atan((DB(1)-ii)/(jj-DB(2))))*180/pi + 180;
            elseif ((jj<DB(2)) && (ii<DB(1)))    
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi + 360;
            end                
        end
    end   

    choice = questdlg('Do you want to perform the radial averaging over all angles or a certain range of angles?',...
        'Radial averaging',...
        'All','Segment','Cancel','Cancel');
    switch choice
        case 'All'                    
            for ii = 1:udata.Qnum
                q_win = q_map>=q(ii)-q_res & q_map<=q(ii)+q_res;
                I_vec = img(q_win);
                I_avg(ii) = mean(I_vec(~isnan(I_vec)));
            end        
            ang1 = max(phi_map(:));
            ang2 = min(phi_map(:));
        figure('tag','Ith with label'); plot(th,I_avg)
        xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')
        title('Averaged over all angles');
        case 'Segment'                     
            choice = questdlg('Do you want to directly input or use mouse to select the starting and ending angles?',...
            'Angle input',...
            'Input','Click','Cancel','Cancel');
            switch choice
                case 'Input'
                    prompt = {'Starting angle (deg)','Ending angle (deg)'};
                    dlg_title = 'Angle selection';
                    para_ang = inputdlg(prompt,dlg_title, [1,25]);
                    ang1 = str2double(para_ang{1}); ang2 = str2double(para_ang{2});
                    img_temp = img;
                    img_temp(phi_map<ang1 | phi_map>ang2) = NaN;
                    for ii = 1:udata.Qnum
                        q_win = q_map>=q(ii)-q_res & q_map<=q(ii)+q_res;                
                        I_vec = img_temp(q_win);
                        I_avg(ii) = mean(I_vec(~isnan(I_vec)));
                    end        
                    figure; imagesc(img_temp); axis image;        
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar
                    figure('tag','Ith with label'); plot(th,I_avg)
                    xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')
                    title(['Averaged over angles from ' num2str(ang1) ' to ' num2str(ang2) ' deg']);
                case 'Click'
                    hdlg = msgbox({'In the diffraction pattern, click two points to define the angle range for radial averaging. Single click first point and double click the second.';},...
                    'Angle selection');
                    set(gcf,'Resize','on');
                    uiwait(hdlg);
                    figure; imagesc(img); axis image
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar
                    [x y] = getpts; x = round(x); y = round(y);
                    ang1 = phi_map(y(1),x(1));
                    ang2 = phi_map(y(2),x(2));                    
                    img_temp = img;
                    img_temp(phi_map<min(ang1,ang2) | phi_map>max(ang1,ang2)) = NaN;
                    for ii = 1:udata.Qnum
                        q_win = q_map>=q(ii)-q_res & q_map<=q(ii)+q_res;                
                        I_vec = img_temp(q_win);
                        I_avg(ii) = mean(I_vec(~isnan(I_vec)));
                    end        
                    figure; imagesc(img_temp); axis image;        
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar
                    figure('tag','Ith with label'); plot(th,I_avg)
                    xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')
                    title(['Averaged over angles from ' num2str(ang1) ' to ' num2str(ang2) ' deg']);
                case 'Cancel'
                    return;
            end
        case 'Cancel'
            return;            
    end         
    udata.th = th;
    udata.Ith = I_avg;
    udata.phi1 = ang1;
    udata.phi2 = ang2;
    udata.phi_map = phi_map;
    set(hFigXRD,'UserData',udata);
end

% Function for calculating I(tth) from a data series
function xrd_CalIthSerFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');   
    if ~isfield(udata,'imgSeries')
        errordlg('You forgot to load data!','Error');
        return;
    elseif ~isfield(udata,'E1') || ~isfield(udata,'currentE')
        errordlg('You need to calculate q map first!','Error');
        return;
    elseif ~isfield(udata,'Qnum') || ~isfield(udata,'Qres')
        errordlg('You forgot to input number of points and averaging resolution!','Error');
        return;
    elseif ~isfield(udata,'q_map')
        errordlg('You need to calculate q map first!','Error');
        return;
    elseif isnan(udata.Qnum) || isnan(udata.Qres)        
        errordlg('You forgot to input the number of points and averaging resolution!','Error');
        return;            
    elseif  ~isequal(udata.E1,udata.currentE) || ...
            ~isequal(udata.SDD,udata.currentSDD) || ...
            ~isequal(udata.DA,udata.currentDA) || ...
            ~isequal(udata.PS,udata.currentPS) || ...
            ~isequal(udata.SF,udata.currentSF) || ...
            ~isequal(udata.DBX,udata.currentDBX) || ...
            ~isequal(udata.DBY,udata.currentDBY)
        errordlg('You need to calculate q map again due to the change of parameters!','Error');
        return;
    end
    if ~isfield(udata,'mask')
        udata.mask = ones(udata.sz_img);
    elseif isfield(udata,'mask') && ~isequal(size(udata.mask), udata.sz_img)
        errordlg('Please re-define the ROI!','Error');
        return;
    end            
    if isfield(udata,'IthSer')
        udata = rmfield(udata,'IthSer');
    end
    q_map = imresize(udata.q_map.*udata.mask,1/udata.SF);
    q = linspace(min(q_map(:)),max(q_map(:)),udata.Qnum);
    q_res = udata.Qres;
    I_avg = zeros(1,udata.Qnum);
    th = 2*180/pi*asin(q*udata.lamda(1)/4/pi);
    
    DB = [udata.DBY/udata.SF, udata.DBX/udata.SF]; 
    D = ceil(udata.sz_img/udata.SF);                        
    phi_map = zeros(D);
    for ii = 1:D(1)
        for jj = 1:D(2)
            if  ((jj<DB(2)) && (ii>=DB(1)))                                 
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi;
            elseif ((jj>=DB(2)) && (ii>DB(1)))
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi + 180;
            elseif ((jj>=DB(2)) && (ii<=DB(1)))
                phi_map(ii,jj) = abs(atan((DB(1)-ii)/(jj-DB(2))))*180/pi + 180;
            elseif ((jj<DB(2)) && (ii<DB(1)))    
                phi_map(ii,jj) = atan((DB(1)-ii)/(jj-DB(2)))*180/pi + 360;
            end                
        end
    end   

    choice = questdlg('Do you want to perform the radial averaging over all angles or a certain range of angles?',...
        'Radial averaging',...
        'All','Segment','Cancel','Cancel');
    switch choice
        case 'All'                
            fig = figure('tag','Ith with label'); 
            for jj = 1:length(udata.imgSeries)
                img = imresize(udata.imgSeries{jj}.*udata.mask,1/udata.SF); 
                for ii = 1:udata.Qnum
                    q_win = q_map>=q(ii)-q_res & q_map<=q(ii)+q_res;
                    I_vec = img(q_win);
                    I_avg(ii) = mean(I_vec(~isnan(I_vec)));
                end
                udata.IthSer{jj} = I_avg;
                figure(fig); plot(th,I_avg + udata.DelIth*(jj-1)); hold on
                xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')
                title('Averaged over all angles');
            end        
        case 'Segment'                     
            choice = questdlg('Do you want to directly input or use mouse to select the starting and ending angles?',...
            'Angle input',...
            'Input','Click','Cancel','Cancel');
            switch choice
                case 'Input'
                    prompt = {'Starting angle (deg)','Ending angle (deg)'};
                    dlg_title = 'Angle selection';
                    para_ang = inputdlg(prompt,dlg_title, [1,25]);
                    ang1 = str2double(para_ang{1}); ang2 = str2double(para_ang{2});
                    img_temp = imresize(udata.img.*udata.mask,1/udata.SF);
                    img_temp(phi_map<ang1 | phi_map>ang2) = NaN;                       
                    figure; imagesc(img_temp); axis image;        
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar                    
                    fig = figure('tag','Ith with label'); 
                    for jj = 1:length(udata.imgSeries)
                        img_temp = imresize(udata.imgSeries{jj}.*udata.mask,1/udata.SF);
                        img_temp(phi_map<ang1 | phi_map>ang2) = NaN;                       
                            for ii = 1:udata.Qnum
                                q_win = q_map>=q(ii)-q_res & q_map<=q(ii)+q_res;                
                                I_vec = img_temp(q_win);
                                I_avg(ii) = mean(I_vec(~isnan(I_vec)));
                            end
                        udata.IthSer{jj} = I_avg;
                        figure(fig); plot(th,I_avg + udata.DelIth*(jj-1)); hold on
                        xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')
                        title(['Averaged over angles from ' num2str(ang1) ' to ' num2str(ang2) ' deg']);
                    end                        
                    
                case 'Click'
                    prompt = {'Diffractoin pattern No: '};
                    dlg_title = 'Which pattern to base on';
                    LoadData = inputdlg(prompt,dlg_title, [1,length(dlg_title)+20]);
                    b = str2double(LoadData{1});   
                    hdlg = msgbox({'In the diffraction pattern, click two points to define the angle range for radial averaging. Single click first point and double click the second.';},...
                    'Angle selection');
                    set(gcf,'Resize','on');
                    uiwait(hdlg);
                    img_temp = imresize(udata.imgSeries{b}.*udata.mask,1/udata.SF);
                    figure; imagesc(img_temp); axis image
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar
                    [x y] = getpts; x = round(x); y = round(y);
                    ang1 = phi_map(y(1),x(1));
                    ang2 = phi_map(y(2),x(2));                     
                    img_temp(phi_map<min(ang1,ang2) | phi_map>max(ang1,ang2)) = NaN;
                    figure; imagesc(img_temp); axis image;        
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar
                    fig = figure('tag','Ith with label'); 
                    for jj = 1:length(udata.imgSeries)
                        img_temp = imresize(udata.imgSeries{jj}.*udata.mask,1/udata.SF);
                        img_temp(phi_map<min(ang1,ang2) | phi_map>max(ang1,ang2)) = NaN;
                        for ii = 1:udata.Qnum
                            q_win = q_map>=q(ii)-q_res & q_map<=q(ii)+q_res;                
                            I_vec = img_temp(q_win);
                            I_avg(ii) = mean(I_vec(~isnan(I_vec)));
                        end        
                        udata.IthSer{jj} = I_avg;
                        figure(fig); plot(th,I_avg + udata.DelIth*(jj-1)); hold on
                        xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')
                        title(['Averaged over angles from ' num2str(ang1) ' to ' num2str(ang2) ' deg']);
                    end                    
                case 'Cancel'
                    return;
            end
        case 'Cancel'
            return;            
    end
    for ii = 1:length(udata.imgSeries)
        I_map(ii,:) = udata.IthSer{ii};          
    end
    figure; imagesc(I_map); set(gca,'Ydir','normal'); title('Raw data');    
    xlabel('2{\theta} ({\circ})'); ylabel('Frame');
    hdlg = msgbox({'Click two points horizontally in the figure to get the background region';},'Normalization');    
    set(gcf,'Resize','on');
    uiwait(hdlg);
    [x y] = getpts;    
    for ii = 1:length(udata.imgSeries)
        Ith = udata.IthSer{ii};
        a = min(round(x(1)),round(x(2)));
        b = max(round(x(1)),round(x(2)));
        I_map(ii,:) = Ith - mean(Ith(a:b));          
    end    
    I_map_blur = imresize(I_map,10,'bicubic');
    sz = size(I_map_blur);
    th_img = linspace(th(1),th(end),sz(2));
    frame_img = linspace(1,length(udata.imgSeries),sz(1));
    figure; imagesc(th_img,frame_img,I_map_blur); set(gca,'Ydir','normal'); title('Treated data');
    xlabel('2{\theta} ({\circ})'); ylabel('Frame')
    figure; imagesc(th_img,frame_img,I_map); set(gca,'Ydir','normal'); title('Raw data');
    xlabel('2{\theta} ({\circ})'); ylabel('Frame');

    udata.th = th;
    udata.Ith = udata.IthSer{1};
    udata.I_map = I_map;
    udata.I_map_blur = I_map_blur;
    udata.phi_map = phi_map;
    set(hFigXRD,'UserData',udata);
end

% Function for calculating I(tth) of simulated diffraction pattern
function xrd_CalIthSimuFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');   
    if ~isfield(udata,'I_cal')
        errordlg('You do not have simulated diffraction pattern!','Error');
        return;
    elseif isnan(udata.Qnum) || isnan(udata.Qres)        
        errordlg('You forgot to input the number of points and averaging resolution!','Error');
        return;            
    end            
    if ~isfield(udata,'mask')
        udata.mask = ones(udata.sz_img);
    end        
    I_cal = imresize(udata.I_cal.*udata.mask,1/udata.SF); 
    q_map = imresize(udata.q_map.*udata.mask,1/udata.SF);
    %q = linspace(min(q_map(:)),2*pi/udata.lamda(1),udata.Qnum);    
    q = linspace(min(q_map(:)),max(q_map(:)),udata.Qnum);
    q_res = udata.Qres;
    I_avg = zeros(1,udata.Qnum);
    for ii = 1:udata.Qnum
        q_win = q_map>=q(ii)-q_res & q_map<=q(ii)+q_res;
        I_vec = I_cal(q_win);
        I_avg(ii) = mean(I_vec(~isnan(I_vec)));
    end
    th = 2*180/pi*asin(q*udata.lamda(1)/4/pi);
    figure('tag','Ith of simulation with label'); plot(th,I_avg)
    xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')    
    udata.th_sim = th;
    udata.Ith_sim = I_avg;
    set(hFigXRD,'UserData',udata);
end

% Function for calculating I(phi) from a data series
function xrd_CalIphiSerFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');   
    if ~isfield(udata,'imgSeries')
        errordlg('You forgot to load a data series!','Error');
        return;
    elseif ~isfield(udata,'E1') || ~isfield(udata,'currentE')
        errordlg('You need to calculate q map first!','Error');
        return;
    elseif ~isfield(udata,'Pnum') || ~isfield(udata,'Pres')
        errordlg('You forgot to input number of points and averaging resolution!','Error');
        return;
    elseif isnan(udata.Pnum) || isnan(udata.Pres)
        errordlg('You forgot to input number of points and averaging resolution!','Error');
        return;
    elseif ~isfield(udata,'q_map') || ~isfield(udata,'phi_map')
        errordlg('You need to calculate q map first!','Error');
        return;
    elseif isnan(udata.Qnum) || isnan(udata.Qres)        
        errordlg('You forgot to input the number of points and averaging resolution!','Error');
        return;            
    elseif  ~isequal(udata.E1,udata.currentE) || ...
            ~isequal(udata.SDD,udata.currentSDD) || ...
            ~isequal(udata.DA,udata.currentDA) || ...
            ~isequal(udata.PS,udata.currentPS) || ...
            ~isequal(udata.SF,udata.currentSF) || ...
            ~isequal(udata.DBX,udata.currentDBX) || ...
            ~isequal(udata.DBY,udata.currentDBY)
        errordlg('You need to calculate q map again due to the change of parameters!','Error');
        return;
    end
    if ~isfield(udata,'mask')
        udata.mask = ones(udata.sz_img);
    elseif isfield(udata,'mask') && ~isequal(size(udata.mask), udata.sz_img)
        errordlg('Please re-define the ROI!','Error');
        return;
    end            
    q_map = imresize(udata.q_map.*udata.mask,1/udata.SF);
    phi_map = imresize(udata.phi_map.*udata.mask,1/udata.SF);    
    phi = linspace(min(phi_map(:)),max(phi_map(:)),udata.Pnum);
    phi_res = udata.Pres;
    I_avg = zeros(1,udata.Pnum);                    

    choice = questdlg('Do you want to perform the averaging over all q or a selected q range?',...
        'Averaging',...
        'All','Segment','Cancel','Cancel');
    switch choice
        case 'All'                
            fig = figure('tag','I_phi with label'); 
            for jj = 1:length(udata.imgSeries)
                img = imresize(udata.imgSeries{jj}.*udata.mask,1/udata.SF); 
                for ii = 1:udata.Pnum
                    phi_win = phi_map>=phi(ii)-phi_res & phi_map<=phi(ii)+phi_res;
                    I_vec = img(phi_win);
                    I_avg(ii) = mean(I_vec(~isnan(I_vec)));
                end
                udata.IphiSer{jj} = I_avg;
                figure(fig); plot(phi,I_avg + udata.DelIphi*(jj-1)); hold on
                xlabel('{\phi} ({\circ})'); ylabel('Intensity (a.u.)')
                title('Averaged over all angles');
            end        
        case 'Segment'                     
            choice = questdlg('Do you want to directly input or use mouse to select the starting and ending q?',...
            'q input',...
            'Input','Click','Cancel','Cancel');
            switch choice
                case 'Input'
                    prompt = {'Starting q (A)','Ending q (A)'};
                    dlg_title = 'q selection';
                    para_q = inputdlg(prompt,dlg_title, [1,25]);
                    q1 = str2double(para_q{1}); q2 = str2double(para_q{2});
                    img_temp = imresize(udata.img.*udata.mask,1/udata.SF);
                    img_temp(q_map<min(q1,q2) | q_map>max(q1,q2)) = NaN;
                    figure; imagesc(img_temp); axis image;        
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar                    
                    fig = figure('tag','I_phi with label'); 
                    for jj = 1:length(udata.imgSeries)
                        img_temp = imresize(udata.imgSeries{jj}.*udata.mask,1/udata.SF);
                        img_temp(q_map<q1 | q_map>q2) = NaN;                       
                            for ii = 1:udata.Pnum
                                phi_win = phi_map>=phi(ii)-phi_res & phi_map<=phi(ii)+phi_res;                
                                I_vec = img_temp(phi_win);
                                I_avg(ii) = mean(I_vec(~isnan(I_vec)));
                            end
                        udata.IphiSer{jj} = I_avg;
                        figure(fig); plot(phi,I_avg + udata.DelIphi*(jj-1)); hold on
                        xlabel('{\phi} ({\circ})'); ylabel('Intensity (a.u.)')
                        title(['Averaged over q from ' num2str(q1) ' to ' num2str(q2) ' deg']);
                    end
                    figure; imagesc(img_temp); axis image                    
                case 'Click'
                    prompt = {'Diffractoin pattern No: '};
                    dlg_title = 'Which pattern to base on';
                    LoadData = inputdlg(prompt,dlg_title, [1,length(dlg_title)+20]);
                    b = str2double(LoadData{1});                    
                    hdlg = msgbox({'In the diffraction pattern, click two points to define the q range for averaging. Single click first point and double click the second.';},...
                    'q selection');
                    set(gcf,'Resize','on');
                    uiwait(hdlg);
                    img_temp = imresize(udata.imgSeries{b}.*udata.mask,1/udata.SF);
                    figure; imagesc(img_temp); axis image
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar
                    [x y] = getpts; x = round(x); y = round(y);
                    q1 = q_map(y(1),x(1));
                    q2 = q_map(y(2),x(2));                     
                    img_temp(q_map<min(q1,q2) | q_map>max(q1,q2)) = NaN;
                    figure; imagesc(img_temp); axis image;        
                    caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);colorbar
                    fig = figure('tag','I_phi with label'); 
                    for jj = 1:length(udata.imgSeries)
                        img_temp = imresize(udata.imgSeries{jj}.*udata.mask,1/udata.SF);
                        img_temp(q_map<min(q1,q2) | q_map>max(q1,q2)) = NaN;
                        for ii = 1:udata.Pnum
                            phi_win = phi_map>=phi(ii)-phi_res & phi_map<=phi(ii)+phi_res;                
                            I_vec = img_temp(phi_win);
                            I_avg(ii) = mean(I_vec(~isnan(I_vec)));
                        end        
                        udata.IphiSer{jj} = I_avg;
                        figure(fig); plot(phi,I_avg + udata.DelIphi*(jj-1)); hold on
                        xlabel('{\phi} ({\circ})'); ylabel('Intensity (a.u.)')
                        title(['Averaged over q from ' num2str(q1) ' to ' num2str(q2) ' deg']);
                    end 
                    figure; imagesc(img_temp); axis image
                case 'Cancel'
                    return;
            end
        case 'Cancel'
            return;            
    end
    for ii = 1:length(udata.imgSeries)
        I_phi_map(ii,:) = udata.IphiSer{ii};          
    end    
    figure; imagesc(I_phi_map); set(gca,'Ydir','normal'); title('Raw data');      
    I_phi_map_blur = imresize(I_phi_map,10,'bicubic');
    sz = size(I_phi_map_blur);
    phi_img = linspace(phi(1),phi(end),sz(2));
    frame_img = linspace(1,length(udata.imgSeries),sz(1));
    figure; imagesc(phi_img,frame_img,I_phi_map_blur); set(gca,'Ydir','normal'); title('Treated data');
    xlabel('{\phi} ({\circ})'); ylabel('Frame')
    figure; imagesc(phi_img,frame_img,I_phi_map); set(gca,'Ydir','normal'); title('Raw data');
    xlabel('{\phi} ({\circ})'); ylabel('Frame')
    udata.phi = phi;
    udata.Iphi = udata.IphiSer{1};
    udata.I_phi_map = I_phi_map;
    udata.I_phi_map_blur = I_phi_map_blur;    
    set(hFigXRD,'UserData',udata);
end

% Function for overlaying experiment and simulated I(tth) in one plot
function xrd_OverlayIthFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');  
    if ~isfield(udata,'Ith') || ~isfield(udata,'Ith_sim')
        errordlg('You do not have two I(tth) plots to compare!','Error');
        return;  
    end        
    hdlg = msgbox({'In the diffraction pattern, circle out a region to get the mean background noise value.';},...
                    'Noise');
    set(gcf,'Resize','on');
    uiwait(hdlg);
    figure; imagesc(udata.img); axis image;
    colorbar; caxis([mean(udata.img(:))-2*std(udata.img(:)) mean(udata.img(:))+4*std(udata.img(:))]);    
    h = imrect(gca); p = round(wait(h));
    img_ROI = udata.img(p(2):p(2)+p(4),p(1):p(1)+p(3));
    img_noise = mean(img_ROI(:));
    hdlg = msgbox({'In the experiment I(tth) plot, click multiple points to define background';},...
                    'Remove background');
    set(gcf,'Resize','on');
    uiwait(hdlg);
    hFig = findall(0,'tag','Ith with label');
    close(hFig);
    figure('tag','Ith with label');
    plot(udata.th,udata.Ith-img_noise); hold on; set(gca,'Ylim',[0 max(udata.Ith-img_noise)]);
    [x y] =getpts;
    p0 = [0,0.05,30]; lb = [-1e4,0,0]; ub = [1e4,0.2,1e3];
    opt = optimset ('Display','off','MaxIter',1e20,'TolX',1.0e-20,'TolFun',1e-10);
    f = @(p,x)p(1)*exp(-p(2)*x)+p(3);
    p = lsqcurvefit(f,p0,x,y,lb,ub,opt);
    Ith_bgr = f(p,udata.th);
    plot(udata.th,Ith_bgr,'r');  
    Ith_noBgr = udata.Ith-Ith_bgr-img_noise;
    I_temp = Ith_noBgr(~isnan(Ith_noBgr));
    Imax = max(I_temp(2:end-1));
    R = Imax/max(udata.Ith_sim);
    Ith_cal = udata.Ith_sim*R;
    Ith_fit = udata.Ith_sim*R+Ith_bgr+img_noise;
    figure('tag','Ith compare'); 
    set(gcf,'outerposition',[screenSize(3)/6 screenSize(4)/4 screenSize(3)*2/3 screenSize(4)/2]);
    subplot(1,2,1);
    plot(udata.th, udata.Ith,'linewidth',2); hold on
    plot(udata.th, Ith_fit,'r','linewidth',2);    
    xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')    
    legend('Experiment','Simulation'); title('Original');
    subplot(1,2,2);
    plot(udata.th, Ith_noBgr,'linewidth',2); hold on
    plot(udata.th, Ith_cal,'r','linewidth',2);
    xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')    
    legend('Experiment','Simulation'); title('No background');
    udata.Ith_fit = Ith_fit;
    udata.Ith_noBgr = Ith_noBgr;
    udata.img_noise = img_noise;
    udata.Ith_bgr = Ith_bgr;
    udata.Ith_cal = Ith_cal;
    udata.R = R;
    set(hFigXRD,'UserData',udata);
end

% Function for quantitative curve fitting of I(tth). Convolute with pseudo
% Voigt function with simulated I(tth)
function xrd_IthFittingFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');  
    if isnan(udata.eta) || isnan(udata.sigma)
        errordlg('You need to input parameters eta and sigma','Error');
        return;  
    end          
    if ~isfield(udata,'Ith_fit')
        errordlg('You need to run "Overlay I(tth) function before curve fitting!');
        return;
    end        
    hdlg = msgbox({'In the plot, click two points to define the angle range you are interested for fitting. Single click first point and double click the second.';},...
                    'Data range selection');
                    set(gcf,'Resize','on');
                    uiwait(hdlg);
    figure; plot(udata.Ith);
    [x,y] = getpts; x = round(x); y = round(y);
    figure; plot(udata.Ith(min(x):max(x)));
    f = udata.eta;        
    sig = udata.sigma;            
    th1 = udata.th(min(x):max(x));
    I1 = udata.Ith(min(x):max(x));
    bgr1 = udata.Ith_bgr(min(x):max(x));
    I_noBgr1 = udata.Ith_noBgr(min(x):max(x));
    Ical1 = udata.Ith_cal(min(x):max(x));
    R = udata.R;
    noise = udata.img_noise;
    th = linspace(th1(1),th1(end),length(th1));
    I = interp1(th1,I1,th);
    bgr = interp1(th1,bgr1,th);
    I_noBgr = interp1(th1,I_noBgr1,th);
    Ical = interp1(th1,Ical1,th);
    %Im1 = max(Ical);
    Im1 = max(I_noBgr);
    N = 1001;
    x = linspace(-2,2,N);        
    del_th = 0;
    A = 0;
    th_new = linspace(th(1)-del_th,th(end)-del_th,length(th));        
    V = (1-f)/(sig*sqrt(2*pi))*exp(-x.^2/2/sig^2) + f*sig/2/pi./(x.^2+(sig/2)^2); % Pseudo Voigt function;
    figure; plot(x,V/max(V));
    Ifit_conv = conv(Ical,V);
    Ifit_conv = Ifit_conv(round(N/2):round(N/2)+length(th)-1);
    Im2 = max(Ifit_conv);

    choice = questdlg('Do you want to fit the curve by matching the max peak intensity',...
    'Curve fitting option',...
    'Yes, match','No, do not match','Cancel','Cancel');
    switch choice
        case 'Yes, match'        
             Ifit_end = Ifit_conv*Im1/Im2;            
        case 'No, do not match'
            B_vec = Im1/Im2*linspace(0.9,1.5,100);
            sig_vec = linspace(0.001,0.1,100);
            for ii = 1:length(B_vec)
                for jj = 1:length(sig_vec)
                    V = (1-f)/(sig_vec(jj)*sqrt(2*pi))*exp(-x.^2/2/sig_vec(jj)^2) + f*sig_vec(jj)/2/pi./(x.^2+(sig_vec(jj)/2)^2);    
                    Ifit_conv = conv(Ical,V);
                    Ifit_conv = Ifit_conv(round(N/2):round(N/2)+length(th)-1);    
                    Ifit_end = Ifit_conv*B_vec(ii);
                    I_fit = Ifit_end+bgr+noise+A;
                    I_err = (I_fit-I).^2;
                    I_err_sum(ii,jj) = sum(I_err(:));
                end
            end
            [a,b] = min(I_err_sum);
            [c,d] = min(a);
            V = (1-f)/(sig_vec(d)*sqrt(2*pi))*exp(-x.^2/2/sig_vec(d)^2) + f*sig_vec(d)/2/pi./(x.^2+(sig_vec(d)/2)^2);    
            Ifit_conv = conv(Ical,V);
            Ifit_conv = Ifit_conv(round(N/2):round(N/2)+length(th)-1);    
            Ifit_end = Ifit_conv*B_vec(b(d));       
            udata.sigma = sig_vec(d);
            set(findall(hFigXRD,'tag','EditSigma'),'string',udata.sigma);           
        case 'Cancel'
            return;            
    end 
    
    figure; plot(th,I); hold on; plot(th_new,Ifit_end+bgr+noise+A,'r')
    xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')    
    legend('Experiment','Simulation');    
    udata.th_fit = th_new;
    udata.Ith_fit_final = Ifit_end+bgr+noise+A;
    udata.x = x;
    udata.y = y;
    set(hFigXRD,'UserData',udata);
end

% Function for labeling (hkl) for all harmonic energies
function xrd_LabelAllEFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');  
    xrd_hklFcn;    
    col_str = ['b','r','g','c','m','y'];
    choice = questdlg('Which I(tth) plot do you want to label?',...
        'Label I(tth)',...
        'Experiment','Simulation','Cancel','Cancel');
    switch choice
        case 'Experiment'        
            if ~isfield(udata,'Ith')
                errordlg('You do not have an experiment I(tth) to label!','Error');
                return;  
            end
            udata.A = (max(udata.Ith)-min(udata.Ith))/100;
            hFig = findall(0,'tag','Ith with label');
            close(hFig);
            figure('tag','Ith with label');
            plot(udata.th,udata.Ith,'linewidth',2); hold on
            set(gca,'ylim',[min(udata.Ith),max(udata.Ith)]);
            for ii = 1:udata.NHP        
                Angle1 = 2*asin(udata.lamda(ii)./2./udata.d_hkl1)*180/pi;
                Angle2 = 2*asin(udata.lamda(ii)./2./udata.d_hkl2)*180/pi;
                leg_cell{ii} = ['No.' num2str(ii) ' harmonic'];
                I_ref1 = udata.I1*udata.A + min(udata.Ith);
                I_ref2 = udata.I2*udata.A + min(udata.Ith);
                if isfield(udata,'Iabs_H')
                    if numel(udata.Iabs_H) == udata.NHP
                        I_ref1 = (I_ref1-min(udata.Ith))* udata.Iabs_H(ii)+min(udata.Ith);
                        I_ref2 = (I_ref2-min(udata.Ith))* udata.Iabs_H(ii)+min(udata.Ith);
                    end
                end
                N_NaN1 = numel(Angle1(isnan(Angle1)));
                N_NaN2 = numel(Angle2(isnan(Angle2)));
                Angle1(isnan(Angle1)) = rand(1,N_NaN1)/100;
                Angle2(isnan(Angle2)) = rand(1,N_NaN2)/100;
                I_ref1(isnan(I_ref1)) = 0;
                I_ref2(isnan(I_ref2)) = 0;
                bar(Angle1,I_ref1,0.01,col_str(ii),'Edgecolor',col_str(ii)); hold on  
                bar(Angle2,I_ref2,0.01,'w','Edgecolor',col_str(ii),'LineStyle',':'); hold on
            end            
            xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')  
            title('Blue: 1st; Red: 2nd; Green: 3rd     Solid: Phase 1; Dashed: Phase 2');
            set(gca,'xlim',[0 max(udata.th)]);         
            udata.currentIth = 1;
            set(hFigXRD,'UserData',udata);
            return;
        case 'Simulation'
            if ~isfield(udata,'Ith_sim')
               errordlg('You do not have a simulation plot to label!','Error');
               return; 
            end
            udata.A = max(udata.Ith_sim)/150;
            hFig = findall(0,'tag','Ith with label');
            close(hFig);
            figure('tag','Ith with label');
            plot(udata.th_sim,udata.Ith_sim,'linewidth',2); hold on
            for ii = 1:udata.NHP        
                Angle1 = 2*asin(udata.lamda(ii)./2./udata.d_hkl1)*180/pi;
                Angle2 = 2*asin(udata.lamda(ii)./2./udata.d_hkl2)*180/pi;
                leg_cell{ii} = ['No.' num2str(ii) ' harmonic'];
                I_ref1 = udata.I1*udata.A;
                I_ref2 = udata.I2*udata.A;
                if isfield(udata,'Iabs_H')
                    if numel(udata.Iabs_H) == udata.NHP
                        I_ref1 = I_ref1* udata.Iabs_H(ii);
                        I_ref2 = I_ref2* udata.Iabs_H(ii);
                    end
                end
                N_NaN1 = numel(Angle1(isnan(Angle1)));
                N_NaN2 = numel(Angle2(isnan(Angle2)));
                Angle1(isnan(Angle1)) = rand(1,N_NaN1)/100;
                Angle2(isnan(Angle2)) = rand(1,N_NaN2)/100;
                I_ref1(isnan(I_ref1)) = 0;
                I_ref2(isnan(I_ref2)) = 0;
                bar(Angle1,I_ref1,0.01,col_str(ii),'Edgecolor',col_str(ii)); hold on  
                bar(Angle2,I_ref2,0.01,'w','Edgecolor',col_str(ii),'LineStyle',':'); hold on                                
            end 
            xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')
            title('Blue: 1st; Red: 2nd; Green: 3rd     Solid: Phase 1; Dashed: Phase 2');
            set(gca,'xlim',[0 max(udata.th_sim)]);
            udata.currentIth = 0;
            set(hFigXRD,'UserData',udata);    
            return;
        case 'Cancel'
            return;
    end      
    set(hFigXRD,'UserData',udata);
end

% Function to increase label height
function xrd_LabelPlusFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    hFig = findall(0,'tag','Ith with label');
    close(hFig);
    udata.A = udata.A * 2;
    col_str = ['b','r','g','c','m','y'];
    IthFig = figure('tag','Ith with label'); 
    if udata.currentIth == 1;
        plot(udata.th,udata.Ith,'linewidth',2); hold on
        set(gca,'ylim',[min(udata.Ith),max(udata.Ith)]);
    elseif udata.currentIth == 0;
        plot(udata.th_sim,udata.Ith_sim,'linewidth',2); hold on
    end
    for ii = 1:udata.NHP        
        Angle1 = 2*asin(udata.lamda(ii)./2./udata.d_hkl1)*180/pi;
        Angle2 = 2*asin(udata.lamda(ii)./2./udata.d_hkl2)*180/pi;
        leg_cell{ii} = ['No.' num2str(ii) ' harmonic'];
        if udata.currentIth == 1
            I_ref1 = udata.I1*udata.A + min(udata.Ith);
            I_ref2 = udata.I2*udata.A + min(udata.Ith);
            if isfield(udata,'Iabs_H')
                if numel(udata.Iabs_H) == udata.NHP
                    I_ref1 = (I_ref1 - min(udata.Ith))* udata.Iabs_H(ii) + min(udata.Ith);
                    I_ref2 = (I_ref2 - min(udata.Ith))* udata.Iabs_H(ii) + min(udata.Ith);
                end
            end
        elseif udata.currentIth == 0
            I_ref1 = udata.I1*udata.A;
            I_ref2 = udata.I2*udata.A;
            if isfield(udata,'Iabs_H')
                if numel(udata.Iabs_H) == udata.NHP
                    I_ref1 = I_ref1* udata.Iabs_H(ii);
                    I_ref2 = I_ref2* udata.Iabs_H(ii);
                end
            end
        end       
        if isfield(udata,'th'); th = udata.th; end
        if isfield(udata,'th_sim'); th = udata.th_sim; end
        N_NaN1 = numel(Angle1(isnan(Angle1)));
        N_NaN2 = numel(Angle2(isnan(Angle2)));
        Angle1(isnan(Angle1)) = rand(1,N_NaN1)/100;
        Angle2(isnan(Angle2)) = rand(1,N_NaN2)/100;
        I_ref1(isnan(I_ref1)) = 0;
        I_ref2(isnan(I_ref2)) = 0;
        bar(Angle1,I_ref1,0.01,col_str(ii),'Edgecolor',col_str(ii)); hold on  
        bar(Angle2,I_ref2,0.01,'w','Edgecolor',col_str(ii),'LineStyle',':'); hold on    
    end
    xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')         
    set(gca,'xlim',[0 max(th)]);
    title('Blue: 1st; Red: 2nd; Green: 3rd     Solid: Phase 1; Dashed: Phase 2'); 
    set(hFigXRD,'UserData',udata);
    pause(1);    
end

% Function to decrease label height
function xrd_LabelMinusFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    hFig = findall(0,'tag','Ith with label');
    close(hFig);
    udata.A = udata.A * 0.5;
    col_str = ['b','r','g','c','m','y'];
    IthFig = figure('tag','Ith with label'); 
    if udata.currentIth == 1;
        plot(udata.th,udata.Ith,'linewidth',2); hold on
        set(gca,'ylim',[min(udata.Ith),max(udata.Ith)]);
    elseif udata.currentIth == 0;
        plot(udata.th_sim,udata.Ith_sim,'linewidth',2); hold on
    end
        for ii = 1:udata.NHP        
        Angle1 = 2*asin(udata.lamda(ii)./2./udata.d_hkl1)*180/pi;
        Angle2 = 2*asin(udata.lamda(ii)./2./udata.d_hkl2)*180/pi;
        leg_cell{ii} = ['No.' num2str(ii) ' harmonic'];
        if udata.currentIth == 1
            I_ref1 = udata.I1*udata.A + min(udata.Ith);
            I_ref2 = udata.I2*udata.A + min(udata.Ith);
            if isfield(udata,'Iabs_H')
                if numel(udata.Iabs_H) == udata.NHP
                    I_ref1 = (I_ref1 - min(udata.Ith))* udata.Iabs_H(ii) + min(udata.Ith);
                    I_ref2 = (I_ref2 - min(udata.Ith))* udata.Iabs_H(ii) + min(udata.Ith);
                end
            end
        elseif udata.currentIth == 0
            I_ref1 = udata.I1*udata.A;
            I_ref2 = udata.I2*udata.A;
            if isfield(udata,'Iabs_H')
                if numel(udata.Iabs_H) == udata.NHP
                    I_ref1 = I_ref1* udata.Iabs_H(ii);
                    I_ref2 = I_ref2* udata.Iabs_H(ii);
        
                end
            end
        end        
        if isfield(udata,'th'); th = udata.th; end
        if isfield(udata,'th_sim'); th = udata.th_sim; end
        N_NaN1 = numel(Angle1(isnan(Angle1)));
        N_NaN2 = numel(Angle2(isnan(Angle2)));
        Angle1(isnan(Angle1)) = rand(1,N_NaN1)/100;
        Angle2(isnan(Angle2)) = rand(1,N_NaN2)/100;
        I_ref1(isnan(I_ref1)) = 0;
        I_ref2(isnan(I_ref2)) = 0;
        bar(Angle1,I_ref1,0.01,col_str(ii),'Edgecolor',col_str(ii)); hold on  
        bar(Angle2,I_ref2,0.01,'w','Edgecolor',col_str(ii),'LineStyle',':'); hold on    
    end
    xlabel('2{\theta} ({\circ})'); ylabel('Intensity (a.u.)')         
    set(gca,'xlim',[0 max(th)]);
    title('Blue: 1st; Red: 2nd; Green: 3rd     Solid: Phase 1; Dashed: Phase 2');    
    set(hFigXRD,'UserData',udata);
    pause(1);
end

% Function for removing sample structure
function xrd_RemoveStrFcn1(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if isfield(udata,'CS1'); udata = rmfield(udata,'CS1'); end
    if isfield(udata,'LPa1'); udata = rmfield(udata,{'LPa1','LPb1','LPc1'...
            'Alpha1','Beta1','Gamma1','h1','k1','l1','I1'}); end        
    if isfield(udata,'d_hkl1'); udata = rmfield(udata,'d_hkl1'); end
    if isfield(udata,'P1perc'); udata = rmfield(udata,'P1perc'); end
    set(findall(hFigXRD,'tag','EditP1perc'),'string',' ');
    set(findall(hFigXRD,'tag','EditLPa1'),'string',' ');
    set(findall(hFigXRD,'tag','EditLPb1'),'string',' ');
    set(findall(hFigXRD,'tag','EditLPc1'),'string',' ');
    set(findall(hFigXRD,'tag','EditAlpha1'),'string',' ');
    set(findall(hFigXRD,'tag','EditBeta1'),'string',' ');
    set(findall(hFigXRD,'tag','EditGamma1'),'string',' ');
    set(findall(hFigXRD,'tag','Edith11'),'string',' ');
    set(findall(hFigXRD,'tag','Editk11'),'string',' ');
    set(findall(hFigXRD,'tag','Editl11'),'string',' ');
    set(findall(hFigXRD,'tag','EditI11'),'string',' ');
    set(findall(hFigXRD,'tag','Edith12'),'string',' ');
    set(findall(hFigXRD,'tag','Editk12'),'string',' ');
    set(findall(hFigXRD,'tag','Editl12'),'string',' ');
    set(findall(hFigXRD,'tag','EditI12'),'string',' ');
    set(findall(hFigXRD,'tag','Edith13'),'string',' ');
    set(findall(hFigXRD,'tag','Editk13'),'string',' ');
    set(findall(hFigXRD,'tag','Editl13'),'string',' ');
    set(findall(hFigXRD,'tag','EditI13'),'string',' ');
    set(findall(hFigXRD,'tag','Edith14'),'string',' ');
    set(findall(hFigXRD,'tag','Editk14'),'string',' ');
    set(findall(hFigXRD,'tag','Editl14'),'string',' ');
    set(findall(hFigXRD,'tag','EditI14'),'string',' ');
    set(findall(hFigXRD,'tag','Edith15'),'string',' ');
    set(findall(hFigXRD,'tag','Editk15'),'string',' ');
    set(findall(hFigXRD,'tag','Editl15'),'string',' ');
    set(findall(hFigXRD,'tag','EditI15'),'string',' ');
    set(findall(hFigXRD,'tag','Edith16'),'string',' ');
    set(findall(hFigXRD,'tag','Editk16'),'string',' ');
    set(findall(hFigXRD,'tag','Editl16'),'string',' ');
    set(findall(hFigXRD,'tag','EditI16'),'string',' ');
    set(findall(hFigXRD,'tag','Edith17'),'string',' ');
    set(findall(hFigXRD,'tag','Editk17'),'string',' ');
    set(findall(hFigXRD,'tag','Editl17'),'string',' ');
    set(findall(hFigXRD,'tag','EditI17'),'string',' ');    
    set(findall(hFigXRD,'tag','Edith18'),'string',' ');
    set(findall(hFigXRD,'tag','Editk18'),'string',' ');
    set(findall(hFigXRD,'tag','Editl18'),'string',' ');
    set(findall(hFigXRD,'tag','EditI18'),'string',' ');
    set(hFigXRD,'UserData',udata);
end

function xrd_RemoveStrFcn2(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if isfield(udata,'CS2'); udata = rmfield(udata,'CS2'); end
    if isfield(udata,'LPa2'); udata = rmfield(udata,{'LPa2','LPb2','LPc2'...
            'Alpha2','Beta2','Gamma2','h2','k2','l2','I2'}); end        
    if isfield(udata,'d_hkl2'); udata = rmfield(udata,'d_hkl2'); end
    if isfield(udata,'P2perc'); udata = rmfield(udata,'P2perc'); end
    set(findall(hFigXRD,'tag','EditP2perc'),'string',' ');
    set(findall(hFigXRD,'tag','EditLPa2'),'string',' ');
    set(findall(hFigXRD,'tag','EditLPb2'),'string',' ');
    set(findall(hFigXRD,'tag','EditLPc2'),'string',' ');
    set(findall(hFigXRD,'tag','EditAlpha2'),'string',' ');
    set(findall(hFigXRD,'tag','EditBeta2'),'string',' ');
    set(findall(hFigXRD,'tag','EditGamma2'),'string',' ');
    set(findall(hFigXRD,'tag','Edith21'),'string',' ');
    set(findall(hFigXRD,'tag','Editk21'),'string',' ');
    set(findall(hFigXRD,'tag','Editl21'),'string',' ');
    set(findall(hFigXRD,'tag','EditI21'),'string',' ');
    set(findall(hFigXRD,'tag','Edith22'),'string',' ');
    set(findall(hFigXRD,'tag','Editk22'),'string',' ');
    set(findall(hFigXRD,'tag','Editl22'),'string',' ');
    set(findall(hFigXRD,'tag','EditI22'),'string',' ');
    set(findall(hFigXRD,'tag','Edith23'),'string',' ');
    set(findall(hFigXRD,'tag','Editk23'),'string',' ');
    set(findall(hFigXRD,'tag','Editl23'),'string',' ');
    set(findall(hFigXRD,'tag','EditI23'),'string',' ');
    set(findall(hFigXRD,'tag','Edith24'),'string',' ');
    set(findall(hFigXRD,'tag','Editk24'),'string',' ');
    set(findall(hFigXRD,'tag','Editl24'),'string',' ');
    set(findall(hFigXRD,'tag','EditI24'),'string',' ');
    set(findall(hFigXRD,'tag','Edith25'),'string',' ');
    set(findall(hFigXRD,'tag','Editk25'),'string',' ');
    set(findall(hFigXRD,'tag','Editl25'),'string',' ');
    set(findall(hFigXRD,'tag','EditI25'),'string',' ');
    set(findall(hFigXRD,'tag','Edith26'),'string',' ');
    set(findall(hFigXRD,'tag','Editk26'),'string',' ');
    set(findall(hFigXRD,'tag','Editl26'),'string',' ');
    set(findall(hFigXRD,'tag','EditI26'),'string',' ');
    set(findall(hFigXRD,'tag','Edith27'),'string',' ');
    set(findall(hFigXRD,'tag','Editk27'),'string',' ');
    set(findall(hFigXRD,'tag','Editl27'),'string',' ');
    set(findall(hFigXRD,'tag','EditI27'),'string',' ');   
    set(findall(hFigXRD,'tag','Edith28'),'string',' ');
    set(findall(hFigXRD,'tag','Editk28'),'string',' ');
    set(findall(hFigXRD,'tag','Editl28'),'string',' ');
    set(findall(hFigXRD,'tag','EditI28'),'string',' ');
    set(hFigXRD,'UserData',udata);
end

% Function for exporting I(tth) data to *.txt file
function xrd_ExportIthFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if ~isfield(udata,'Ith') || ~isfield(udata,'th')
        errordlg('You do not hve I(tth) data to export!','Error');
        return;
    end
    data = [udata.th' udata.Ith'];
    [filename,filepath] = uiputfile('*.txt','Save data as','*.txt');
    if isequal(filename,0), return; end
    dlmwrite(fullfile(filepath,filename),data);
end

% Function for saving the I(tth) plot
function xrd_SaveIthPlotFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if ~isfield(udata,'Ith') || ~isfield(udata,'th')
        errordlg('You do not have I(tth) data to export!','Error');
        return;
    end
    hFig = findall(0,'tag','Ith with label');
    if isempty(hFig)
        errordlg('You do not have a I(tth) plot figure!','Error');
        return;
    end
    [filename,filepath] = uiputfile({'*.fig';'*.jpg';'*.tif'},'Save figure as');
    if isequal(filename,0), return; end
    saveas(hFig,fullfile(filepath,filename));
end

% Function for removing all imported data
function xrd_RemoveDataFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    if isfield(udata,'img'); udata = rmfield(udata,'img'); end
    if isfield(udata,'imgSeries'); udata = rmfield(udata,'imgSeries'); end
    if isfield(udata,'bgr'); udata = rmfield(udata,'bgr'); end
    %if isfield(udata,'E'); udata = rmfield(udata,{'E','E1','lamda'}); end    
    %if isfield(udata,'mask'); udata = rmfield(udata,'mask'); end    
    %if isfield(udata,'Iabs'); udata = rmfield(udata,{'Eabs','Iabs'}); end    
    %if isfield(udata,'q_map'); udata = rmfield(udata,{'q_map'}); end    
    %if isfield(udata,'phi_map'); udata = rmfield(udata,{'phi_map'}); end    
    %set(findall(hFigXRD,'tag','EditE1'),'string',' ');
    set(findall(hFigXRD,'tag','Single file'),'string',' ');
    set(findall(hFigXRD,'tag','Package file'),'string',' ');
    set(findall(hFigXRD,'tag','Background file'),'string',' ');
    %set(findall(hFigXRD,'tag','Energy spec'),'string',' ');
    %set(findall(hFigXRD,'tag','Show absorption file'),'string',' ');
    set(hFigXRD,'UserData',udata);
end

% Function for copying userdata to workspace
function xrd_CopyToWorkspaceFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');        
    assignin('base','udata',udata);
    msgbox('Your data were successfully copied to current workspace','Data copied');
    set(gcf,'Resize','on');
end

% Function for saving all data
function xrd_SaveAllDataFcn(varargin)
    hFigXRD = gcbf;
    udata = get(hFigXRD,'UserData');
    [filename,filepath] = uiputfile('*.mat','Save data as');
    if isequal(filename,0), return; end
    save(fullfile(filepath,filename),'udata');    
end

% Function for closing all figure
function xrd_CloseFigFcn(varargin)
    hfigs = findall(0,'type','figure');
    tags = get(hfigs,'tag');
    if ~iscell(tags), tags = {tags}; end
    for ii=1:length(hfigs)
        if isempty(strfind(tags{ii},'xrd_fig')) && isempty(strfind(tags{ii},'xrd_fig_sc')) 
            delete(hfigs(ii)); 
        end        
    end
end

% Function for quitting the program
function xrd_CloseProFcn(varargin)
    hfigs = findall(0,'type','figure');
    tags = get(hfigs,'tag');
    if ~iscell(tags), tags = {tags}; end
    for ii=1:length(hfigs)
        if strcmp(tags{ii},'xrd_fig_sc') == 0
            delete(hfigs(ii)); 
        end        
    end
end

end
